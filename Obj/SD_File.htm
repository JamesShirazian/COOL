<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\SD_File.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\SD_File.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 567]: Last Updated: Sat Jun 25 17:49:49 2011
<BR><P>
<H3>Maximum Stack Usage =       1272 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::sync() &rArr; std::use_facet&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;(const std::locale&) &rArr; std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[19]">Reset_Handler</a>
 <LI><a href="#[268]">os_sys_manager_ret</a>
 <LI><a href="#[1fe]">os_switch_tasks_ret</a>
 <LI><a href="#[1a]">Undef_Handler</a>
 <LI><a href="#[1b]">SWI_Handler</a>
 <LI><a href="#[1c]">PAbt_Handler</a>
 <LI><a href="#[1d]">DAbt_Handler</a>
 <LI><a href="#[1e]">IRQ_Handler</a>
 <LI><a href="#[1f]">FIQ_Handler</a>
 <LI><a href="#[26]">Switch_task</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4d]">os_idle_demon</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">os_idle_demon</a><BR>
 <LI><a href="#[bf]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bf]">_sys_exit</a><BR>
 <LI><a href="#[1bb]">__rw::__rw_allocate(unsigned, int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b5]">__rw::__rw_throw(int, ...)</a><BR>
 <LI><a href="#[119]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b5]">__rw::__rw_throw(int, ...)</a><BR>
 <LI><a href="#[1c0]">std::locale::locale()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ec]">std::locale::_C_init()</a><BR>
 <LI><a href="#[cd]">os_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cd]">os_error</a><BR>
 <LI><a href="#[1a]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">Undef_Handler</a><BR>
 <LI><a href="#[1b]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">SWI_Handler</a><BR>
 <LI><a href="#[1c]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">PAbt_Handler</a><BR>
 <LI><a href="#[1d]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">DAbt_Handler</a><BR>
 <LI><a href="#[1e]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">IRQ_Handler</a><BR>
 <LI><a href="#[1f]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[47]">&lang;Func5&rang;</a> from locale.o(i.<Func5>) referenced from locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
 <LI><a href="#[1d]">DAbt_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[1f]">FIQ_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[1e]">IRQ_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[1c]">PAbt_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[19]">Reset_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[1b]">SWI_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[26]">Switch_task</a> from hal_arm.o(.emb_text) referenced from hal_arm.o(.emb_text)
 <LI><a href="#[1a]">Undef_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[2e]">TimerT1isr()</a> from attachedtimer.o(.text) referenced from attachedtimer.o(.text)
 <LI><a href="#[30]">TimerT3isr()</a> from timer.o(.text) referenced from timer.o(.text)
 <LI><a href="#[2d]">adcHandler()</a> from interrupt.o(.text) referenced from interrupt.o(.text)
 <LI><a href="#[2f]">StopWatchT2isr()</a> from stopwatch.o(.text) referenced from stopwatch.o(.text)
 <LI><a href="#[2b]">interruptHandler()</a> from interrupt.o(.text) referenced from interrupt.o(.text)
 <LI><a href="#[4a]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[3d]">__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[29]">do1()</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[28]">do2()</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[33]">dOff()</a> from buzzer.o(.text) referenced from buzzer.o(.text)
 <LI><a href="#[32]">setLow()</a> from buzzer.o(.text) referenced from buzzer.o(.text)
 <LI><a href="#[2c]">RTC0isr()</a> from interrupt.o(.text) referenced from interrupt.o(.text)
 <LI><a href="#[31]">setHigh()</a> from buzzer.o(.text) referenced from buzzer.o(.text)
 <LI><a href="#[56]">__rw::__rw_facet_base::_C_initfacet(const std::locale&)</a> from ios.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale) referenced from ios.o(.constdata__ZTVNSt6locale5facetE)
 <LI><a href="#[56]">__rw::__rw_facet_base::_C_initfacet(const std::locale&)</a> from ios.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale) referenced from ios.o(.constdata__ZTVSt5ctypeIwE)
 <LI><a href="#[56]">__rw::__rw_facet_base::_C_initfacet(const std::locale&)</a> from ios.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale) referenced from ios.o(.constdata__ZTVSt7codecvtIccSt11__mbstate_tE)
 <LI><a href="#[56]">__rw::__rw_facet_base::_C_initfacet(const std::locale&)</a> from ios.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale) referenced from ios.o(.constdata__ZTVSt7codecvtIwcSt11__mbstate_tE)
 <LI><a href="#[56]">__rw::__rw_facet_base::_C_initfacet(const std::locale&)</a> from ios.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[51]">__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)</a> from ios.o(t._ZN4__rw16__rw_facet_makerISt5ctypeIcEE13_C_maker_funcEiPKcj) referenced from rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs)
 <LI><a href="#[51]">__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)</a> from ios.o(t._ZN4__rw16__rw_facet_makerISt5ctypeIcEE13_C_maker_funcEiPKcj) referenced from ios.o(t._ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E)
 <LI><a href="#[52]">__rw::__rw_facet_maker&lang;std::ctype&lang;wchar_t&rang;&rang;::_C_maker_func(int, const char*, unsigned)</a> from ios.o(t._ZN4__rw16__rw_facet_makerISt5ctypeIwEE13_C_maker_funcEiPKcj) referenced from ios.o(t._ZNSt9basic_iosIwSt11char_traitsIwEE4initEPSt15basic_streambufIwS1_E)
 <LI><a href="#[53]">__rw::__rw_facet_maker&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;::_C_maker_func(int, const char*, unsigned)</a> from ios.o(t._ZN4__rw16__rw_facet_makerISt7codecvtIccSt11__mbstate_tEE13_C_maker_funcEiPKcj) referenced from ios.o(t._ZSt9use_facetISt7codecvtIccSt11__mbstate_tEERKT_RKSt6locale)
 <LI><a href="#[54]">__rw::__rw_facet_maker&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;::_C_maker_func(int, const char*, unsigned)</a> from ios.o(t._ZN4__rw16__rw_facet_makerISt7codecvtIwcSt11__mbstate_tEE13_C_maker_funcEiPKcj) referenced from ios.o(t._ZSt9use_facetISt7codecvtIwcSt11__mbstate_tEERKT_RKSt6locale)
 <LI><a href="#[4c]">__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()</a> from rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev) referenced from rwcats.o(i.__sti___10_rwcats_cpp)
 <LI><a href="#[49]">__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector()</a> from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev) referenced from messages.o(i._ZSt13__rw_get_catsv)
 <LI><a href="#[7e]">__rw::__rw_throw_exception_noex(int, char*)</a> from rwthrowproc_impl_noex.o(i._ZN4__rw25__rw_throw_exception_noexEiPc) referenced from rwthrowproc_noex.o(.data)
 <LI><a href="#[61]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
 <LI><a href="#[59]">std::ctype&lang;char&rang;::do_widen(char) const</a> from char.o(i._ZNKSt5ctypeIcE8do_widenEc) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[59]">std::ctype&lang;char&rang;::do_widen(char) const</a> from char.o(i._ZNKSt5ctypeIcE8do_widenEc) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[69]">std::ctype&lang;wchar_t&rang;::do_widen(char) const</a> from ios.o(i._ZNKSt5ctypeIwE8do_widenEc) referenced from ios.o(.constdata__ZTVSt5ctypeIwE)
 <LI><a href="#[6c]">std::codecvt&lang;char, char, std::__mbstate_t&rang;::do_encoding() const</a> from ios.o(i._ZNKSt7codecvtIccSt11__mbstate_tE11do_encodingEv) referenced from ios.o(.constdata__ZTVSt7codecvtIccSt11__mbstate_tE)
 <LI><a href="#[6d]">std::codecvt&lang;char, char, std::__mbstate_t&rang;::do_always_noconv() const</a> from ios.o(i._ZNKSt7codecvtIccSt11__mbstate_tE16do_always_noconvEv) referenced from ios.o(.constdata__ZTVSt7codecvtIccSt11__mbstate_tE)
 <LI><a href="#[6b]">std::codecvt&lang;char, char, std::__mbstate_t&rang;::do_out(std::__mbstate_t&, const char*, const char*, const char*&, char*, char*, char*&) const</a> from ios.o(i._ZNKSt7codecvtIccSt11__mbstate_tE6do_outERS0_PKcS4_RS4_PcS6_RS6_) referenced from ios.o(.constdata__ZTVSt7codecvtIccSt11__mbstate_tE)
 <LI><a href="#[71]">std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::do_encoding() const</a> from ios.o(i._ZNKSt7codecvtIwcSt11__mbstate_tE11do_encodingEv) referenced from ios.o(.constdata__ZTVSt7codecvtIwcSt11__mbstate_tE)
 <LI><a href="#[70]">std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::do_always_noconv() const</a> from ios.o(i._ZNKSt7codecvtIwcSt11__mbstate_tE16do_always_noconvEv) referenced from ios.o(.constdata__ZTVSt7codecvtIwcSt11__mbstate_tE)
 <LI><a href="#[6f]">std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::do_out(std::__mbstate_t&, const wchar_t*, const wchar_t*, const wchar_t*&, char*, char*, char*&) const</a> from ios.o(i._ZNKSt7codecvtIwcSt11__mbstate_tE6do_outERS0_PKwS4_RS4_PcS6_RS6_) referenced from ios.o(.constdata__ZTVSt7codecvtIwcSt11__mbstate_tE)
 <LI><a href="#[75]">std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const</a> from rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[74]">std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const</a> from rwstdexcept.o(t._ZNKSt8messagesIcE7do_openERKSsRKSt6locale) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[46]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</a> from ios.o(t._ZNSsD1Ev) referenced from locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
 <LI><a href="#[46]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</a> from ios.o(t._ZNSsD1Ev) referenced from ios.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev)
 <LI><a href="#[57]">std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()</a> from char.o(i._ZNSt12ctype_bynameIcED0Ev) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[5c]">std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::sync()</a> from ios.o(t._ZNSt13basic_filebufIcSt11char_traitsIcEE4syncEv) referenced from ios.o(.constdata__ZTVSt13basic_filebufIcSt11char_traitsIcEE)
 <LI><a href="#[5a]">std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::setbuf(char*, long)</a> from ios.o(t._ZNSt13basic_filebufIcSt11char_traitsIcEE6setbufEPcl) referenced from ios.o(.constdata__ZTVSt13basic_filebufIcSt11char_traitsIcEE)
 <LI><a href="#[5b]">std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::overflow(int)</a> from ios.o(t._ZNSt13basic_filebufIcSt11char_traitsIcEE8overflowEi) referenced from ios.o(.constdata__ZTVSt13basic_filebufIcSt11char_traitsIcEE)
 <LI><a href="#[5f]">std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::sync()</a> from ios.o(t._ZNSt13basic_filebufIwSt11char_traitsIwEE4syncEv) referenced from ios.o(.constdata__ZTVSt13basic_filebufIwSt11char_traitsIwEE)
 <LI><a href="#[5d]">std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::setbuf(wchar_t*, long)</a> from ios.o(t._ZNSt13basic_filebufIwSt11char_traitsIwEE6setbufEPwl) referenced from ios.o(.constdata__ZTVSt13basic_filebufIwSt11char_traitsIwEE)
 <LI><a href="#[5e]">std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::overflow(int)</a> from ios.o(t._ZNSt13basic_filebufIwSt11char_traitsIwEE8overflowEi) referenced from ios.o(.constdata__ZTVSt13basic_filebufIwSt11char_traitsIwEE)
 <LI><a href="#[60]">std::__rw_exception::~__rw_exception()</a> from rwstdexcept.o(i._ZNSt14__rw_exceptionD1Ev) referenced from rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
 <LI><a href="#[62]">std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;::setbuf(char*, long)</a> from ios.o(t._ZNSt15basic_streambufIcSt11char_traitsIcEE6setbufEPcl) referenced from ios.o(.constdata__ZTVSt15basic_streambufIcSt11char_traitsIcEE)
 <LI><a href="#[63]">std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;::overflow(int)</a> from ios.o(t._ZNSt15basic_streambufIcSt11char_traitsIcEE8overflowEi) referenced from ios.o(.constdata__ZTVSt15basic_streambufIcSt11char_traitsIcEE)
 <LI><a href="#[64]">std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::setbuf(wchar_t*, long)</a> from ios.o(t._ZNSt15basic_streambufIwSt11char_traitsIwEE6setbufEPwl) referenced from ios.o(.constdata__ZTVSt15basic_streambufIwSt11char_traitsIwEE)
 <LI><a href="#[65]">std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::overflow(int)</a> from ios.o(t._ZNSt15basic_streambufIwSt11char_traitsIwEE8overflowEi) referenced from ios.o(.constdata__ZTVSt15basic_streambufIwSt11char_traitsIwEE)
 <LI><a href="#[50]">std::__rw_open_cat_data::__rw_open_cat_data()</a> from messages.o(i._ZNSt18__rw_open_cat_dataC1Ev) referenced from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
 <LI><a href="#[4f]">std::__rw_open_cat_data::~__rw_open_cat_data()</a> from messages.o(i._ZNSt18__rw_open_cat_dataD1Ev) referenced from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
 <LI><a href="#[4f]">std::__rw_open_cat_data::~__rw_open_cat_data()</a> from messages.o(i._ZNSt18__rw_open_cat_dataD1Ev) referenced from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev)
 <LI><a href="#[58]">std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)</a> from char.o(i._ZNSt5ctypeIcE12_C_initfacetERKSt6locale) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[58]">std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)</a> from char.o(i._ZNSt5ctypeIcE12_C_initfacetERKSt6locale) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[67]">std::ctype&lang;char&rang;::~ctype__deallocating()</a> from char.o(i._ZNSt5ctypeIcED0Ev) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[66]">std::ctype&lang;char&rang;::~ctype()</a> from char.o(i._ZNSt5ctypeIcED1Ev) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[68]">std::ctype&lang;wchar_t&rang;::~ctype__deallocating()</a> from ios.o(i._ZNSt5ctypeIwED0Ev) referenced from ios.o(.constdata__ZTVSt5ctypeIwE)
 <LI><a href="#[55]">std::locale::facet::~facet__deallocating()</a> from ios.o(i._ZNSt6locale5facetD0Ev) referenced from ios.o(.constdata__ZTVNSt6locale5facetE)
 <LI><a href="#[48]">std::locale::~locale()</a> from locale.o(i._ZNSt6localeD1Ev) referenced from locale.o(i._ZNSt6locale7classicEv)
 <LI><a href="#[6a]">std::codecvt&lang;char, char, std::__mbstate_t&rang;::~codecvt__deallocating()</a> from ios.o(i._ZNSt7codecvtIccSt11__mbstate_tED0Ev) referenced from ios.o(.constdata__ZTVSt7codecvtIccSt11__mbstate_tE)
 <LI><a href="#[6e]">std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::~codecvt__deallocating()</a> from ios.o(i._ZNSt7codecvtIwcSt11__mbstate_tED0Ev) referenced from ios.o(.constdata__ZTVSt7codecvtIwcSt11__mbstate_tE)
 <LI><a href="#[2a]">std::ios_base::Init::~Init()</a> from ios.o(i._ZNSt8ios_base4InitD1Ev) referenced from serialport.o(.text)
 <LI><a href="#[73]">std::messages&lang;char&rang;::~messages__deallocating()</a> from rwstdexcept.o(i._ZNSt8messagesIcED0Ev) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[72]">std::messages&lang;char&rang;::~messages()</a> from rwstdexcept.o(i._ZNSt8messagesIcED1Ev) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[4b]">operator delete[] (void*)</a> from array_del.o(i._ZdaPv) referenced from cxa_vec_new.o(i.__cxa_vec_new)
 <LI><a href="#[3e]">__SWI_0</a> from hal_arm.o(i.__SWI_0) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[3f]">__SWI_1</a> from rt_membox.o(i.__SWI_1) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[40]">__SWI_2</a> from rt_membox.o(i.__SWI_2) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[41]">__SWI_3</a> from hal_arm.o(i.__SWI_3) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[42]">__SWI_4</a> from hal_arm.o(i.__SWI_4) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[43]">__SWI_5</a> from rtx_config.o(.text) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[44]">__SWI_6</a> from hal_arm.o(i.__SWI_6) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[45]">__SWI_7</a> from hal_arm.o(i.__SWI_7) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[7f]">__main</a> from __main.o(!!!main) referenced from lpc2300.o(RESET)
 <LI><a href="#[7a]">__sti___10_Buzzer_cpp</a> from buzzer.o(.text) referenced from buzzer.o(.init_array)
 <LI><a href="#[7c]">__sti___10_locale_cpp</a> from locale.o(i.__sti___10_locale_cpp) referenced from locale.o(.init_array)
 <LI><a href="#[7d]">__sti___10_rwcats_cpp</a> from rwcats.o(i.__sti___10_rwcats_cpp) referenced from rwcats.o(.init_array)
 <LI><a href="#[78]">__sti___13_Interrupt_cpp</a> from interrupt.o(.text) referenced from interrupt.o(.init_array)
 <LI><a href="#[77]">__sti___14_SerialPort_cpp</a> from serialport.o(.text) referenced from serialport.o(.init_array)
 <LI><a href="#[7b]">__sti___8_char_cpp</a> from char.o(i.__sti___8_char_cpp) referenced from char.o(.init_array)
 <LI><a href="#[76]">__sti___8_main_cpp</a> from main.o(.text) referenced from main.o(.init_array)
 <LI><a href="#[79]">__sti___9_Timer_cpp</a> from timer.o(.text) referenced from timer.o(.init_array)
 <LI><a href="#[3a]">_fputc$unlocked</a> from fputc.o(i.fputc) referenced from _printf_char_file_locked.o(.text)
 <LI><a href="#[35]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[37]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[39]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[3b]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[38]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[36]">_snputc</a> from _snputc.o(.text) referenced from c89vsnprintf.o(.text)
 <LI><a href="#[34]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[3c]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[21]">main</a> from main.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[27]">os_clock_interrupt</a> from hal_arm.o(.emb_text) referenced from rtx_config.o(.text)
 <LI><a href="#[4d]">os_idle_demon</a> from rtx_config.o(.text) referenced from rt_task.o(i.os_sys_init1)
 <LI><a href="#[23]">os_irq_ack_lock</a> from rtx_config.o(.text) referenced from hal_arm.o(.emb_text)
 <LI><a href="#[22]">os_sys_init1</a> from rt_task.o(i.os_sys_init1) referenced from hal_arm.o(.emb_text)
 <LI><a href="#[24]">os_sys_manager</a> from rt_system.o(i.os_sys_manager) referenced from hal_arm.o(.emb_text)
 <LI><a href="#[4e]">os_tsk_create0</a> from rt_task.o(i.os_tsk_create0) referenced from rt_task.o(i.os_sys_init1)
 <LI><a href="#[25]">tsk_unlock</a> from rtx_config.o(.text) referenced from hal_arm.o(.emb_text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[19]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[81]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[83]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2af]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[84]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2b0]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[85]"></a>_printf_n</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount (via Veneer)
</UL>

<P><STRONG><a name="[13a]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[87]"></a>_printf_p</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr (via Veneer)
</UL>

<P><STRONG><a name="[89]"></a>_printf_f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[8b]"></a>_printf_e</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[8c]"></a>_printf_g</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[8d]"></a>_printf_a</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[2b1]"></a>_printf_ll</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[8f]"></a>_printf_i</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[91]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[92]"></a>_printf_u</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[93]"></a>_printf_o</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct (via Veneer)
</UL>

<P><STRONG><a name="[95]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex (via Veneer)
</UL>

<P><STRONG><a name="[97]"></a>_printf_lli</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[99]"></a>_printf_lld</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[9a]"></a>_printf_llu</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[9b]"></a>_printf_llo</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct (via Veneer)
</UL>

<P><STRONG><a name="[9d]"></a>_printf_llx</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex (via Veneer)
</UL>

<P><STRONG><a name="[2b2]"></a>_printf_l</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[9f]"></a>_printf_c</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char (via Veneer)
</UL>

<P><STRONG><a name="[a1]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[a3]"></a>_printf_lc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar (via Veneer)
</UL>

<P><STRONG><a name="[a5]"></a>_printf_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring (via Veneer)
</UL>

<P><STRONG><a name="[2b3]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[a7]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init &rArr; __rt_fp_status_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[a9]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2b4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
</UL>

<P><STRONG><a name="[2b5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2b6]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[2b7]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (via Veneer)
</UL>

<P><STRONG><a name="[2b8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[2b9]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (via Veneer)
</UL>

<P><STRONG><a name="[2ba]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2bb]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2bc]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2bd]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2be]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2bf]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2c0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000020))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[2c1]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[2c2]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002D))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[2c3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2c4]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2c5]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2c6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[bd]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_1 &rArr; __cxa_finalize &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[b5]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[2c7]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2c8]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[2c9]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2ca]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2cb]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[2cc]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[82]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2cd]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b7]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b9]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init &rArr; __rt_fp_status_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[2ce]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[ba]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[2cf]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[19d]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[bc]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[2d0]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[be]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[2d1]"></a>_inc_qi</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hal_arm.o(.emb_text), UNUSED)

<P><STRONG><a name="[266]"></a>_dec_qc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[25f]"></a>os_set_env</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[2d2]"></a>os_sys_init0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_arm.o(.emb_text), UNUSED)

<P><STRONG><a name="[262]"></a>os_sys_run</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[27]"></a>os_clock_interrupt</STRONG> (ARM, 128 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> rtx_config.o(.text)
</UL>
<P><STRONG><a name="[268]"></a>os_sys_manager_ret</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[2d3]"></a>SWI_Handler</STRONG> (ARM, 192 bytes, Stack size 0 bytes, hal_arm.o(.emb_text), UNUSED)

<P><STRONG><a name="[1fe]"></a>os_switch_tasks_ret</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SWI_0
</UL>

<P><STRONG><a name="[195]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size 0 bytes, lpc2300.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2d4]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[c3]"></a>mmc_init</STRONG> (Thumb, 494 bytes, Stack size 56 bytes, mci_lpc23xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_set_speed
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_bus_mode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_select_card
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_send_acmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_command
</UL>

<P><STRONG><a name="[c7]"></a>mmc_read_sect</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, mci_lpc23xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_wait_for_tran
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_send_stop
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_dma_start
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_command
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[cb]"></a>mmc_write_sect</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, mci_lpc23xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mmc_write_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_wait_for_tran
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_send_stop
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_dma_start
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_status
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_command
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[cc]"></a>mmc_read_config</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, mci_lpc23xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_wait_for_tran
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_select_card
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_command
</UL>

<P><STRONG><a name="[4d]"></a>os_idle_demon</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.os_sys_init1)
</UL>
<P><STRONG><a name="[269]"></a>os_tmr_call</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_tick
</UL>

<P><STRONG><a name="[cd]"></a>os_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stk_check
</UL>

<P><STRONG><a name="[260]"></a>os_tmr_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[2d5]"></a>os_tmr_force_irq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_config.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>os_tmr_inspect_cnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[264]"></a>os_tmr_inspect_ovf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[23]"></a>os_irq_ack_lock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[43]"></a>__SWI_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[25]"></a>tsk_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SWI_0
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[ce]"></a>__user_perthread_libspace</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr (via Veneer)
</UL>

<P><STRONG><a name="[d0]"></a>_mutex_initialize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mutex_initialize &rArr; os_mut_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>

<P><STRONG><a name="[d2]"></a>_mutex_acquire</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _mutex_acquire &rArr; os_mut_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_self
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flushbuf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[d4]"></a>_mutex_release</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_self
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flushbuf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[1a3]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[d6]"></a>_sys_open</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[d9]"></a>_sys_close</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _sys_close &rArr; __fclose &rArr; fat_close_write &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[db]"></a>_sys_write</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[dd]"></a>_sys_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read
</UL>

<P><STRONG><a name="[16e]"></a>_sys_istty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[df]"></a>_sys_seek</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = _sys_seek &rArr; __setfpos &rArr; fat_set_fpos &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[e1]"></a>_sys_ensure</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flushbuf
</UL>

<P><STRONG><a name="[e3]"></a>_sys_flen</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _sys_flen &rArr; __getfsize &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[2d6]"></a>_sys_tmpnam</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>_sys_command_string</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
</UL>

<P><STRONG><a name="[29]"></a>do1()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = do1() &rArr; LCD::write(float, int, unsigned char, unsigned char) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(float, int, unsigned char, unsigned char)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(char*, unsigned char, unsigned char)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via Veneer)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>do2()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = do2() &rArr; LCD::write(int, int, unsigned char, unsigned char) &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(int, int, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[21]"></a>main</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = main &rArr; LCD::write(float, int, unsigned char, unsigned char) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch::StopWatch()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch::start()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch::stop()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch::getDuration()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt::Interrupt(ADC, int, void(*)())
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(float, int, unsigned char, unsigned char)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(char*, unsigned char, unsigned char)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::clear()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::startADCConversion()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttachedTimer::AttachedTimer(float, int, bool, void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[f9]"></a>LCD::lcd_write_4bit(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::LCD(unsigned char, unsigned char)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::lcd_write_data(unsigned char)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::lcd_write_cmd(unsigned char)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::LCD()
</UL>

<P><STRONG><a name="[f5]"></a>LCD::delay(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::delay(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::delay(int)
</UL>

<P><STRONG><a name="[f7]"></a>LCD::lcd_read_status()</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD::lcd_read_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::wait_while_busy()
</UL>

<P><STRONG><a name="[f6]"></a>LCD::wait_while_busy()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD::wait_while_busy() &rArr; LCD::lcd_read_status()
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::lcd_read_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::lcd_write_data(unsigned char)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::lcd_write_cmd(unsigned char)
</UL>

<P><STRONG><a name="[f8]"></a>LCD::lcd_write_cmd(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD::lcd_write_cmd(unsigned char) &rArr; LCD::wait_while_busy() &rArr; LCD::lcd_read_status()
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::wait_while_busy()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::lcd_write_4bit(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::set_cursor(unsigned char, unsigned char)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::LCD(unsigned char, unsigned char)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::LCD()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::clear()
</UL>

<P><STRONG><a name="[fa]"></a>LCD::lcd_write_data(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD::lcd_write_data(unsigned char) &rArr; LCD::wait_while_busy() &rArr; LCD::lcd_read_status()
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::wait_while_busy()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::lcd_write_4bit(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, unsigned char, unsigned char)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::LCD(unsigned char, unsigned char)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::LCD()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[f3]"></a>LCD::LCD()</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD::LCD() &rArr; LCD::lcd_write_data(unsigned char) &rArr; LCD::wait_while_busy() &rArr; LCD::lcd_read_status()
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::lcd_write_data(unsigned char)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::lcd_write_cmd(unsigned char)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::lcd_write_4bit(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_Timer_cpp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_Interrupt_cpp
</UL>

<P><STRONG><a name="[2d8]"></a>LCD::LCD__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>LCD::LCD(unsigned char, unsigned char)</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::lcd_write_data(unsigned char)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::lcd_write_cmd(unsigned char)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::lcd_write_4bit(unsigned char)
</UL>

<P><STRONG><a name="[2d9]"></a>LCD::LCD__sub_object(unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>LCD::set_cursor(unsigned char, unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD::set_cursor(unsigned char, unsigned char) &rArr; LCD::lcd_write_cmd(unsigned char) &rArr; LCD::wait_while_busy() &rArr; LCD::lcd_read_status()
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::lcd_write_cmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, unsigned char, unsigned char)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(int, int, unsigned char, unsigned char)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(float, int, unsigned char, unsigned char)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(char*, unsigned char, unsigned char)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::clear()
</UL>

<P><STRONG><a name="[e9]"></a>LCD::write(char*, unsigned char, unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD::write(char*, unsigned char, unsigned char) &rArr; LCD::set_cursor(unsigned char, unsigned char) &rArr; LCD::lcd_write_cmd(unsigned char) &rArr; LCD::wait_while_busy() &rArr; LCD::lcd_read_status()
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::set_cursor(unsigned char, unsigned char)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::lcd_write_data(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(int, int, unsigned char, unsigned char)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(float, int, unsigned char, unsigned char)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do1()
</UL>

<P><STRONG><a name="[fd]"></a>LCD::write(std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, unsigned char, unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_clone(unsigned)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::set_cursor(unsigned char, unsigned char)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::lcd_write_data(unsigned char)
</UL>

<P><STRONG><a name="[ea]"></a>LCD::write(int, int, unsigned char, unsigned char)</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = LCD::write(int, int, unsigned char, unsigned char) &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::set_cursor(unsigned char, unsigned char)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(char*, unsigned char, unsigned char)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via Veneer)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz (via Veneer)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do2()
</UL>

<P><STRONG><a name="[e8]"></a>LCD::write(float, int, unsigned char, unsigned char)</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LCD::write(float, int, unsigned char, unsigned char) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::set_cursor(unsigned char, unsigned char)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(char*, unsigned char, unsigned char)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do1()
</UL>

<P><STRONG><a name="[eb]"></a>LCD::clear()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD::clear() &rArr; LCD::set_cursor(unsigned char, unsigned char) &rArr; LCD::lcd_write_cmd(unsigned char) &rArr; LCD::wait_while_busy() &rArr; LCD::lcd_read_status()
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::set_cursor(unsigned char, unsigned char)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::lcd_write_cmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2da]"></a>ADC::ADC()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>ADC::ADC__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>ADC::ADC(unsigned char)</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[2dc]"></a>ADC::ADC__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>ADC::getADCValue()</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>ADC::stopADCConversion()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>ADC::startADCConversion()</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>DAC::DAC()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Buzzer_cpp
</UL>

<P><STRONG><a name="[2df]"></a>DAC::DAC__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dac.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>DAC::setDACValue(int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLow()
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHigh()
</UL>

<P><STRONG><a name="[104]"></a>PortPin::StringToUpper(std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, portpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator [](unsigned)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::PortPin(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::PortPin(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
</UL>

<P><STRONG><a name="[10b]"></a>PortPin::off()</STRONG> (Thumb, 632 bytes, Stack size 20 bytes, portpin.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::setPinConfiguration(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
</UL>

<P><STRONG><a name="[10a]"></a>PortPin::on()</STRONG> (Thumb, 766 bytes, Stack size 20 bytes, portpin.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::setPinConfiguration(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
</UL>

<P><STRONG><a name="[108]"></a>PortPin::setPinConfiguration(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)</STRONG> (Thumb, 3780 bytes, Stack size 40 bytes, portpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::operator ==&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;(const std::basic_string&lang;T1, T2, T3&rang;&, const T1*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::on()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::off()
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::PortPin(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::PortPin(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
</UL>

<P><STRONG><a name="[10c]"></a>PortPin::PortPin(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, portpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::setPinConfiguration(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::StringToUpper(std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>

<P><STRONG><a name="[2e0]"></a>PortPin::PortPin__sub_object(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, portpin.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>PortPin::PortPin(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, portpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::setPinConfiguration(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::StringToUpper(std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>

<P><STRONG><a name="[2e1]"></a>PortPin::PortPin__sub_object(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, portpin.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>PortPin::getPinValue()</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, portpin.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>PortPin::getPinNumber()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, portpin.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt::Interrupt(PortPin, int, void(*)())
</UL>

<P><STRONG><a name="[2e3]"></a>SerialPort::SerialPort()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, serialport.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>SerialPort::SerialPort__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, serialport.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>SerialPort::SerialPort(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, serialport.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>SerialPort::SerialPort__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, serialport.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>SerialPort::open()</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, serialport.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>SerialPort::close()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, serialport.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>SerialPort::readCharachter()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, serialport.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::readLine(char, bool)
</UL>

<P><STRONG><a name="[112]"></a>SerialPort::writeChar(char)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, serialport.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, bool)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(char*, bool)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::readLine(char, bool)
</UL>

<P><STRONG><a name="[110]"></a>SerialPort::readLine(char, bool)</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, serialport.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, unsigned, char)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::erase(unsigned, unsigned)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::writeChar(char)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::readCharachter()
</UL>

<P><STRONG><a name="[115]"></a>SerialPort::newLineOperator(bool)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, serialport.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(float, int, bool)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(int, bool)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, bool)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(char*, bool)
</UL>

<P><STRONG><a name="[117]"></a>SerialPort::write(char*, bool)</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, serialport.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator [](unsigned)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::newLineOperator(bool)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::writeChar(char)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
</UL>

<P><STRONG><a name="[11b]"></a>SerialPort::write(std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, bool)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, serialport.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator [](unsigned)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::newLineOperator(bool)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::writeChar(char)
</UL>

<P><STRONG><a name="[11c]"></a>SerialPort::write(int, bool)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, serialport.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::newLineOperator(bool)
</UL>

<P><STRONG><a name="[11d]"></a>SerialPort::write(float, int, bool)</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, serialport.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::newLineOperator(bool)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
</UL>

<P><STRONG><a name="[2b]"></a>interruptHandler()</STRONG> (ARM, 80 bytes, Stack size 32 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = interruptHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupt.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>RTC0isr()</STRONG> (ARM, 72 bytes, Stack size 32 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC0isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupt.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>adcHandler()</STRONG> (ARM, 52 bytes, Stack size 24 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adcHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupt.o(.text)
</UL>
<P><STRONG><a name="[2e9]"></a>Interrupt::Interrupt()</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>Interrupt::Interrupt__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>Interrupt::Interrupt(PortPin, int, void(*)())</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::getPinNumber()
</UL>

<P><STRONG><a name="[2eb]"></a>Interrupt::Interrupt__sub_object(PortPin, int, void(*)())</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>Interrupt::Interrupt(RealTimeClock, void(*)())</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>Interrupt::Interrupt__sub_object(RealTimeClock, void(*)())</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>Interrupt::Interrupt(ADC, int, void(*)())</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Interrupt::Interrupt(ADC, int, void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ee]"></a>Interrupt::Interrupt__sub_object(ADC, int, void(*)())</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>Interrupt::setInterruptFunctionTo(void(*)())</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>Interrupt::setInterruptPriorityTo(int)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>Interrupt::getInterruptPriority()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>TimerT1isr()</STRONG> (ARM, 200 bytes, Stack size 48 bytes, attachedtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TimerT1isr() &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attachedtimer.o(.text)
</UL>
<P><STRONG><a name="[2f2]"></a>AttachedTimer::AttachedTimer()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, attachedtimer.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>AttachedTimer::AttachedTimer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, attachedtimer.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>AttachedTimer::AttachedTimer(float, int, bool, void(*)())</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, attachedtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AttachedTimer::AttachedTimer(float, int, bool, void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::buzz(float)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::Buzzer(float, int)
</UL>

<P><STRONG><a name="[2f4]"></a>AttachedTimer::AttachedTimer__sub_object(float, int, bool, void(*)())</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, attachedtimer.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>AttachedTimer::setIntervalTo(float)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, attachedtimer.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>AttachedTimer::setFunctionTo(void(*)())</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, attachedtimer.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>AttachedTimer::setNumberOfOccuranceTo(int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, attachedtimer.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>AttachedTimer::start()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, attachedtimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLow()
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHigh()
</UL>

<P><STRONG><a name="[129]"></a>AttachedTimer::stop()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, attachedtimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dOff()
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLow()
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHigh()
</UL>

<P><STRONG><a name="[2f]"></a>StopWatchT2isr()</STRONG> (ARM, 124 bytes, Stack size 48 bytes, stopwatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = StopWatchT2isr() &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stopwatch.o(.text)
</UL>
<P><STRONG><a name="[122]"></a>StopWatch::turnOnTimer2()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stopwatch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch::StopWatch()
</UL>

<P><STRONG><a name="[ef]"></a>StopWatch::StopWatch()</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stopwatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = StopWatch::StopWatch()
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch::turnOnTimer2()
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f8]"></a>StopWatch::StopWatch__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, stopwatch.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>StopWatch::start()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stopwatch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>StopWatch::stop()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stopwatch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>StopWatch::getDuration()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stopwatch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>TimerT3isr()</STRONG> (ARM, 156 bytes, Stack size 48 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TimerT3isr() &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>Timer::turnOnTimer3()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(float, bool)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(float)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer()
</UL>

<P><STRONG><a name="[123]"></a>Timer::Timer()</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::turnOnTimer3()
</UL>

<P><STRONG><a name="[2f9]"></a>Timer::Timer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>Timer::Timer(float)</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::turnOnTimer3()
</UL>

<P><STRONG><a name="[2fa]"></a>Timer::Timer__sub_object(float)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>Timer::Timer(float, bool)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::turnOnTimer3()
</UL>

<P><STRONG><a name="[2fb]"></a>Timer::Timer__sub_object(float, bool)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>Timer::setTimerIntervalTo(float)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>Timer::start()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[2fe]"></a>Timer::stop()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>Timer::reset()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>Timer::isItOver()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>setHigh()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setHigh() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC::setDACValue(int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttachedTimer::stop()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttachedTimer::start()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via Veneer)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buzzer.o(.text)
</UL>
<P><STRONG><a name="[32]"></a>setLow()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setLow()
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC::setDACValue(int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttachedTimer::stop()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttachedTimer::start()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buzzer.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>dOff()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dOff() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttachedTimer::stop()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buzzer.o(.text)
</UL>
<P><STRONG><a name="[12c]"></a>Buzzer::Buzzer(float, int)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, buzzer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttachedTimer::AttachedTimer(float, int, bool, void(*)())
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[301]"></a>Buzzer::Buzzer__sub_object(float, int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, buzzer.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>Buzzer::buzz(float)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, buzzer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttachedTimer::AttachedTimer(float, int, bool, void(*)())
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[302]"></a>Buzzer::on()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buzzer.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>Buzzer::off()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buzzer.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>Buzzer::setVolumeTo(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, buzzer.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>

<P><STRONG><a name="[306]"></a>__semihosting$guard</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>toupper</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, toupper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::StringToUpper(std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
</UL>

<P><STRONG><a name="[116]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, __2printf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(float, int, bool)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(int, bool)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::newLineOperator(bool)
</UL>

<P><STRONG><a name="[102]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(int, int, unsigned char, unsigned char)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(float, int, unsigned char, unsigned char)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(float, int, bool)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(int, bool)
</UL>

<P><STRONG><a name="[90]"></a>_printf_int_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i (via Veneer)
</UL>

<P><STRONG><a name="[138]"></a>__printf</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[308]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[142]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[143]"></a>fopen</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, fopen_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[279]"></a>memcmp</STRONG> (Thumb, 118 bytes, Stack size 4 bytes, memcmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::compare(unsigned, unsigned, const char*, unsigned) const
</UL>

<P><STRONG><a name="[118]"></a>strlen</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::operator ==&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;(const std::basic_string&lang;T1, T2, T3&rang;&, const T1*)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(char*, bool)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_clone(unsigned) (via Veneer)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteData (via Veneer)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadData (via Veneer)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache (via Veneer)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector (via Veneer)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache (via Veneer)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write (via Veneer)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read (via Veneer)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(char*, bool) (via Veneer)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite (via Veneer)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned) (via Veneer)
</UL>

<P><STRONG><a name="[145]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[309]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>__aeabi_memmove</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memmove.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, unsigned, char) (via Veneer)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::move(char*, const char*, unsigned) (via Veneer)
</UL>

<P><STRONG><a name="[147]"></a>__rt_memmove</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memmove.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[30a]"></a>__memmove_lastfew</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries (via Veneer)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry (via Veneer)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write (via Veneer)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[30b]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, unsigned, char) (via Veneer)
</UL>

<P><STRONG><a name="[22f]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo (via Veneer)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries (via Veneer)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus (via Veneer)
</UL>

<P><STRONG><a name="[14b]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[14a]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen (via Veneer)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal (via Veneer)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob (via Veneer)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio (via Veneer)
</UL>

<P><STRONG><a name="[30e]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[d7]"></a>strcmp</STRONG> (ARM, 156 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open (via Veneer)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty (via Veneer)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) (via Veneer)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[310]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nt_name (via Veneer)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
</UL>

<P><STRONG><a name="[311]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r0
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[131]"></a>__rt_ctype_table</STRONG> (ARM, 24 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper (via Veneer)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) (via Veneer)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb (via Veneer)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace (via Veneer)
</UL>

<P><STRONG><a name="[14e]"></a>__rt_new_handler_addr</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rt_new_handler_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_new_handler_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned) (via Veneer)
</UL>

<P><STRONG><a name="[150]"></a>__rt_ddtor_pointer_addr</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rt_ddtor_pointer_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ddtor_pointer_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit (via Veneer)
</UL>

<P><STRONG><a name="[151]"></a>_malloc_internal</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[144]"></a>malloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[155]"></a>_free_internal</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[13e]"></a>free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[156]"></a>__read_errno</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>

<P><STRONG><a name="[158]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt (via Veneer)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow (via Veneer)
</UL>

<P><STRONG><a name="[159]"></a>__c89vsnprintf</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, c89vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[15a]"></a>__2fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, __2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception_noex(int, char*)
</UL>

<P><STRONG><a name="[15b]"></a>_printf_str</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[137]"></a>_printf_int_common</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[312]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>_printf_fp_dec_real</STRONG> (Thumb, 616 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify (via Veneer)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec (via Veneer)
</UL>

<P><STRONG><a name="[133]"></a>_printf_char_common</STRONG> (Thumb, 34 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[34]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[167]"></a>__0sscanf</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[169]"></a>_scanf_int</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[16b]"></a>__flsbuf</STRONG> (Thumb, 498 bytes, Stack size 24 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[188]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[313]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>_fseek</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; __getfsize &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
</UL>

<P><STRONG><a name="[314]"></a>_fseek$unlocked</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>_ftell$unlocked</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>_ftell_internal</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[16d]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[16f]"></a>_writebuf</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[13d]"></a>_fflush</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[16c]"></a>_deferredlazyseek</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[171]"></a>ftell</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ftell_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ftell &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_file_t::_C_seek(long, int)
</UL>

<P><STRONG><a name="[172]"></a>fseek</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fseek_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fseek &rArr; _fseek &rArr; _sys_flen &rArr; __getfsize &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_file_t::_C_seek(long, int)
</UL>

<P><STRONG><a name="[173]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception_noex(int, char*)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_terminate_handler()
</UL>

<P><STRONG><a name="[1c9]"></a>strcpy</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
</UL>

<P><STRONG><a name="[1bf]"></a>strrchr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[175]"></a>wmemmove</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wmemmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wmemmove &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;wchar_t&rang;::move(wchar_t*, const wchar_t*, unsigned)
</UL>

<P><STRONG><a name="[1e6]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
</UL>

<P><STRONG><a name="[316]"></a>__aeabi_memmove4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>__aeabi_memmove8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>__rt_memmove_w</STRONG> (ARM, 128 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[148]"></a>__memmove_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[318]"></a>__memmove_lastfew_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>

<P><STRONG><a name="[178]"></a>__aeabi_vec_delete</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, aeabi_vec_delete_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor_cookie
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()
</UL>

<P><STRONG><a name="[4a]"></a>__default_new_handler()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[1fb]"></a>__cxa_rethrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_rethrow_noexceptions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[154]"></a>__rt_heap_descriptor</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via Veneer)
</UL>

<P><STRONG><a name="[ac]"></a>__rt_locale</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common (via Veneer)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r (via Veneer)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname (via Veneer)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_errno_addr</STRONG> (ARM, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal (via Veneer)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno (via Veneer)
</UL>

<P><STRONG><a name="[319]"></a>__errno$twolibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>__rt_errno_addr$twolibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>__Heap_Full</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[17c]"></a>__Heap_Broken</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[aa]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _init_alloc &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[17e]"></a>__Heap_Initialize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; os_mut_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[14]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>_ll_udiv10</STRONG> (ARM, 160 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[15c]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[15d]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[134]"></a>_printf_truncate_signed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[135]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[86]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n (via Veneer)
</UL>

<P><STRONG><a name="[36]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> c89vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[166]"></a>_printf_fp_infnan</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[17f]"></a>_printf_cs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[a0]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c (via Veneer)
</UL>

<P><STRONG><a name="[a2]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[132]"></a>_printf_char_file</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, _printf_char_file_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[181]"></a>_printf_wctomb</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[98]"></a>_printf_longlong_dec</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu (via Veneer)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld (via Veneer)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli (via Veneer)
</UL>

<P><STRONG><a name="[183]"></a>_printf_longlong_oct</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[94]"></a>_printf_int_oct</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o (via Veneer)
</UL>

<P><STRONG><a name="[9c]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo (via Veneer)
</UL>

<P><STRONG><a name="[184]"></a>_printf_longlong_hex</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[96]"></a>_printf_int_hex</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x (via Veneer)
</UL>

<P><STRONG><a name="[9e]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx (via Veneer)
</UL>

<P><STRONG><a name="[88]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p (via Veneer)
</UL>

<P><STRONG><a name="[16a]"></a>_chval</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[168]"></a>__vfscanf_char</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[38]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>_sbackspace</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[15f]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via Veneer)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[187]"></a>fwrite</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, fwritefast_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_file_t::_C_write(const void*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[b1]"></a>_initio</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[b6]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free (Weak Reference)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[18c]"></a>setlocale</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, locale.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = setlocale &rArr; _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>

<P><STRONG><a name="[174]"></a>__rt_SIGABRT</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[190]"></a>memcpy</STRONG> (ARM, 16 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) (via Veneer)
</UL>

<P><STRONG><a name="[176]"></a>memmove</STRONG> (ARM, 16 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmemmove (via Veneer)
</UL>

<P><STRONG><a name="[192]"></a>__cxa_get_globals</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[17a]"></a>std::terminate()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r0
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[b8]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[193]"></a>__rt_eh_globals_addr</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rt_eh_globals_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_eh_globals_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals (via Veneer)
</UL>

<P><STRONG><a name="[17b]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[3c]"></a>isspace</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isspace &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[196]"></a>_printf_lcs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[a4]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc (via Veneer)
</UL>

<P><STRONG><a name="[a6]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls (via Veneer)
</UL>

<P><STRONG><a name="[185]"></a>__vfscanf</STRONG> (Thumb, 962 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[18a]"></a>setvbuf</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = setvbuf &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[18d]"></a>_setlocale_r</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, locale_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
</UL>

<P><STRONG><a name="[182]"></a>_wcrtomb</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[bb]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[18f]"></a>__sig_exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[18e]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[189]"></a>__rt_SIGRTRED</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[17d]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1a1]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, aeabi_vec_dtor_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r6
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor_cookie
</UL>

<P><STRONG><a name="[194]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[31d]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>__default_signal_display</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[19f]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[1a0]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1a4]"></a>__rt_fp_status_addr</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rt_fp_status_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_fp_status_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1a5]"></a>__ARM_vec_cleanup</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ARM_vec_cleanup_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_vec_cleanup
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r7
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[31f]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[1a7]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries (via Veneer)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name (via Veneer)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name (via Veneer)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_set_fpos (via Veneer)
</UL>

<P><STRONG><a name="[160]"></a>_btod_d2e</STRONG> (ARM, 56 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[1ad]"></a>_d2e_denorm_low</STRONG> (ARM, 84 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[1ac]"></a>_d2e_norm_op1</STRONG> (ARM, 104 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[1ae]"></a>__btod_div_common</STRONG> (ARM, 716 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1af]"></a>_e2e</STRONG> (ARM, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[161]"></a>_btod_ediv</STRONG> (ARM, 52 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
</UL>

<P><STRONG><a name="[162]"></a>_btod_emul</STRONG> (ARM, 52 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
</UL>

<P><STRONG><a name="[1b0]"></a>__btod_mult_common</STRONG> (ARM, 616 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[1b2]"></a>catgets(__rw::__rw_cat*, int, int, const char*)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, rwcats.o(i._Z7catgetsPN4__rw8__rw_catEiiPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = catgets(__rw::__rw_cat*, int, int, const char*) &rArr; __rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_message(int, int, int) const
</UL>

<P><STRONG><a name="[1b4]"></a>catopen(const char*, int)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rwcats.o(i._Z7catopenPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = catopen(const char*, int) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[1b5]"></a>__rw::__rw_throw(int, ...)</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, rwstdexcept.o(i._ZN4__rw10__rw_throwEiz))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::compare(unsigned, unsigned, const char*, unsigned) const
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, unsigned, char)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::erase(unsigned, unsigned)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_file_t::__rw_file_t(int)
</UL>

<P><STRONG><a name="[28f]"></a>__rw::__rw_file_t::_C_get_mode(int)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ios.o(i._ZN4__rw11__rw_file_t11_C_get_modeEi))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_filebuf(int, wchar_t*, long)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::basic_filebuf(int, char*, long)
</UL>

<P><STRONG><a name="[1b8]"></a>__rw::__rw_file_t::_C_seek(long, int)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ios.o(i._ZN4__rw11__rw_file_t7_C_seekEli))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __rw::__rw_file_t::_C_seek(long, int) &rArr; fseek &rArr; _fseek &rArr; _sys_flen &rArr; __getfsize &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::_C_file_seek(long, int)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::_C_file_seek(long, int)
</UL>

<P><STRONG><a name="[1b9]"></a>__rw::__rw_file_t::_C_write(const void*, unsigned, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ios.o(i._ZN4__rw11__rw_file_t8_C_writeEPKvjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_file_t::_C_write(const void*, unsigned, unsigned) &rArr; fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::overflow(int)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::overflow(int)
</UL>

<P><STRONG><a name="[1ba]"></a>__rw::__rw_file_t::__rw_file_t(int)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ios.o(i._ZN4__rw11__rw_file_tC1Ei))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_file_t::__rw_file_t(int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_filebuf(int, wchar_t*, long)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::basic_filebuf(int, char*, long)
</UL>

<P><STRONG><a name="[320]"></a>__rw::__rw_file_t::__rw_file_t__sub_object(int)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ios.o(i._ZN4__rw11__rw_file_tC1Ei), UNUSED)

<P><STRONG><a name="[1bb]"></a>__rw::__rw_allocate(unsigned, int)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rwalloc.o(i._ZN4__rw13__rw_allocateEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = __rw::__rw_allocate(unsigned, int) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
</UL>

<P><STRONG><a name="[1c2]"></a>__rw::__rw_deallocate(void*, unsigned, int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwalloc.o(i._ZN4__rw15__rw_deallocateEPvji))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_clone(unsigned)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>

<P><STRONG><a name="[56]"></a>__rw::__rw_facet_base::_C_initfacet(const std::locale&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ios.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale))
<BR>[Address Reference Count : 5]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
<LI> ios.o(.constdata__ZTVNSt6locale5facetE)
<LI> ios.o(.constdata__ZTVSt5ctypeIwE)
<LI> ios.o(.constdata__ZTVSt7codecvtIccSt11__mbstate_tE)
<LI> ios.o(.constdata__ZTVSt7codecvtIwcSt11__mbstate_tE)
</UL>
<P><STRONG><a name="[1c3]"></a>__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy (via Veneer)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>

<P><STRONG><a name="[321]"></a>__rw::__rw_locale_imp::__rw_locale_imp__sub_object(const char*, unsigned, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj), UNUSED)

<P><STRONG><a name="[1c6]"></a>__rw::__rw_locale_imp::~__rw_locale_imp()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, locale.o(i._ZN4__rw15__rw_locale_impD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>

<P><STRONG><a name="[322]"></a>__rw::__rw_locale_imp::~__rw_locale_imp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(i._ZN4__rw15__rw_locale_impD1Ev), UNUSED)

<P><STRONG><a name="[1c8]"></a>__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, locale.o(i._ZN4__rw21__rw_use_c_lib_localeC1EPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
</UL>

<P><STRONG><a name="[323]"></a>__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale__sub_object(const char*, int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, locale.o(i._ZN4__rw21__rw_use_c_lib_localeC1EPKci), UNUSED)

<P><STRONG><a name="[1ca]"></a>__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, char.o(i._ZN4__rw21__rw_use_c_lib_localeD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
</UL>

<P><STRONG><a name="[324]"></a>__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZN4__rw21__rw_use_c_lib_localeD1Ev), UNUSED)

<P><STRONG><a name="[7e]"></a>__rw::__rw_throw_exception_noex(int, char*)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rwthrowproc_impl_noex.o(i._ZN4__rw25__rw_throw_exception_noexEiPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_throw_exception_noex(int, char*) &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc_noex.o(.data)
</UL>
<P><STRONG><a name="[1b3]"></a>__rw::__catfind(__rw::__rw_cat*)</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, rwcats.o(i._ZN4__rw9__catfindEPNS_8__rw_catE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catgets(__rw::__rw_cat*, int, int, const char*)
</UL>

<P><STRONG><a name="[27b]"></a>__rw::__rw_file_t::_C_is_open() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ios.o(i._ZNK4__rw11__rw_file_t10_C_is_openEv))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::is_open() const
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::is_open() const
</UL>

<P><STRONG><a name="[61]"></a>std::__rw_exception::what() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
</UL>
<P><STRONG><a name="[1cb]"></a>std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, messages.o(i._ZNKSt18__rw_messages_base11_C_cat_openERKSsRKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned) &rArr; std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[1cf]"></a>std::__rw_messages_base::_C_get_locale(int) const</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, messages.o(i._ZNKSt18__rw_messages_base13_C_get_localeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = std::__rw_messages_base::_C_get_locale(int) const &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
</UL>

<P><STRONG><a name="[1d1]"></a>std::__rw_messages_base::_C_get_message(int, int, int) const</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, messages.o(i._ZNKSt18__rw_messages_base14_C_get_messageEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = std::__rw_messages_base::_C_get_message(int, int, int) const &rArr; std::__rw_get_cats() &rArr; __aeabi_atexit &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catgets(__rw::__rw_cat*, int, int, const char*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
</UL>

<P><STRONG><a name="[1e5]"></a>std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, char.o(i._ZNKSt5ctypeIcE2isENSt10ctype_base4maskEc))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
</UL>

<P><STRONG><a name="[59]"></a>std::ctype&lang;char&rang;::do_widen(char) const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, char.o(i._ZNKSt5ctypeIcE8do_widenEc))
<BR>[Address Reference Count : 2]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
<LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[69]"></a>std::ctype&lang;wchar_t&rang;::do_widen(char) const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ios.o(i._ZNKSt5ctypeIwE8do_widenEc))
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt5ctypeIwE)
</UL>
<P><STRONG><a name="[1d2]"></a>std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ios.o(i._ZNKSt6locale12_C_use_facetERKNS_2idEbiPFPN4__rw15__rw_facet_baseEiPKcjE))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::use_facet&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;(const std::locale&)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::use_facet&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;(const std::locale&)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ios&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::init(std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ios&lang;char, std::char_traits&lang;char&rang;&rang;::init(std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;*)
</UL>

<P><STRONG><a name="[1d3]"></a>std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, locale.o(i._ZNKSt6locale13_C_make_facetERKNS_2idEbiPFPN4__rw15__rw_facet_baseEiPKcjE))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
</UL>

<P><STRONG><a name="[1d6]"></a>std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, locale.o(i._ZNKSt6locale16_C_install_facetEPN4__rw15__rw_facet_baseERKNS_2idE))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const &rArr; __rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
</UL>

<P><STRONG><a name="[1d7]"></a>std::locale::name() const</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, locale.o(i._ZNKSt6locale4nameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = std::locale::name() const &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
</UL>

<P><STRONG><a name="[6c]"></a>std::codecvt&lang;char, char, std::__mbstate_t&rang;::do_encoding() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ios.o(i._ZNKSt7codecvtIccSt11__mbstate_tE11do_encodingEv))
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt7codecvtIccSt11__mbstate_tE)
</UL>
<P><STRONG><a name="[1d8]"></a>std::codecvt&lang;char, char, std::__mbstate_t&rang;::always_noconv() const</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ios.o(i._ZNKSt7codecvtIccSt11__mbstate_tE13always_noconvEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::codecvt&lang;char, char, std::__mbstate_t&rang;::always_noconv() const
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::overflow(int)
</UL>

<P><STRONG><a name="[6d]"></a>std::codecvt&lang;char, char, std::__mbstate_t&rang;::do_always_noconv() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ios.o(i._ZNKSt7codecvtIccSt11__mbstate_tE16do_always_noconvEv))
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt7codecvtIccSt11__mbstate_tE)
</UL>
<P><STRONG><a name="[1d9]"></a>std::codecvt&lang;char, char, std::__mbstate_t&rang;::out(std::__mbstate_t&, const char*, const char*, const char*&, char*, char*, char*&) const</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, ios.o(i._ZNKSt7codecvtIccSt11__mbstate_tE3outERS0_PKcS4_RS4_PcS6_RS6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::codecvt&lang;char, char, std::__mbstate_t&rang;::out(std::__mbstate_t&, const char*, const char*, const char*&, char*, char*, char*&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r5
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::overflow(int)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::sync()
</UL>

<P><STRONG><a name="[6b]"></a>std::codecvt&lang;char, char, std::__mbstate_t&rang;::do_out(std::__mbstate_t&, const char*, const char*, const char*&, char*, char*, char*&) const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ios.o(i._ZNKSt7codecvtIccSt11__mbstate_tE6do_outERS0_PKcS4_RS4_PcS6_RS6_))
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt7codecvtIccSt11__mbstate_tE)
</UL>
<P><STRONG><a name="[1db]"></a>std::codecvt&lang;char, char, std::__mbstate_t&rang;::encoding() const</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ios.o(i._ZNKSt7codecvtIccSt11__mbstate_tE8encodingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::codecvt&lang;char, char, std::__mbstate_t&rang;::encoding() const
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::sync()
</UL>

<P><STRONG><a name="[71]"></a>std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::do_encoding() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ios.o(i._ZNKSt7codecvtIwcSt11__mbstate_tE11do_encodingEv))
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt7codecvtIwcSt11__mbstate_tE)
</UL>
<P><STRONG><a name="[1dc]"></a>std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::always_noconv() const</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ios.o(i._ZNKSt7codecvtIwcSt11__mbstate_tE13always_noconvEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::always_noconv() const
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::overflow(int)
</UL>

<P><STRONG><a name="[70]"></a>std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::do_always_noconv() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ios.o(i._ZNKSt7codecvtIwcSt11__mbstate_tE16do_always_noconvEv))
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt7codecvtIwcSt11__mbstate_tE)
</UL>
<P><STRONG><a name="[1dd]"></a>std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::out(std::__mbstate_t&, const wchar_t*, const wchar_t*, const wchar_t*&, char*, char*, char*&) const</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, ios.o(i._ZNKSt7codecvtIwcSt11__mbstate_tE3outERS0_PKwS4_RS4_PcS6_RS6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::out(std::__mbstate_t&, const wchar_t*, const wchar_t*, const wchar_t*&, char*, char*, char*&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r5
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::overflow(int)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::sync()
</UL>

<P><STRONG><a name="[6f]"></a>std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::do_out(std::__mbstate_t&, const wchar_t*, const wchar_t*, const wchar_t*&, char*, char*, char*&) const</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ios.o(i._ZNKSt7codecvtIwcSt11__mbstate_tE6do_outERS0_PKwS4_RS4_PcS6_RS6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::do_out(std::__mbstate_t&, const wchar_t*, const wchar_t*, const wchar_t*&, char*, char*, char*&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt7codecvtIwcSt11__mbstate_tE)
</UL>
<P><STRONG><a name="[1de]"></a>std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::encoding() const</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ios.o(i._ZNKSt7codecvtIwcSt11__mbstate_tE8encodingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::encoding() const
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::sync()
</UL>

<P><STRONG><a name="[1df]"></a>std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ios.o(i._ZNSt11char_traitsIcE4copyEPcPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, unsigned, char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1e0]"></a>std::char_traits&lang;char&rang;::move(char*, const char*, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ios.o(i._ZNSt11char_traitsIcE4moveEPcPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::char_traits&lang;char&rang;::move(char*, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::sync()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[28e]"></a>std::char_traits&lang;char&rang;::not_eof(const int&)</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, ios.o(i._ZNSt11char_traitsIcE7not_eofERKi))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::char_traits&lang;char&rang;::not_eof(const int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::overflow(int)
</UL>

<P><STRONG><a name="[1e1]"></a>std::char_traits&lang;wchar_t&rang;::move(wchar_t*, const wchar_t*, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ios.o(i._ZNSt11char_traitsIwE4moveEPwPKwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::char_traits&lang;wchar_t&rang;::move(wchar_t*, const wchar_t*, unsigned) &rArr; wmemmove &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmemmove
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::sync()
</UL>

<P><STRONG><a name="[297]"></a>std::char_traits&lang;wchar_t&rang;::not_eof(const int&)</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, ios.o(i._ZNSt11char_traitsIwE7not_eofERKi))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::char_traits&lang;wchar_t&rang;::not_eof(const int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::overflow(int)
</UL>

<P><STRONG><a name="[1e2]"></a>std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, char.o(i._ZNSt12ctype_bynameIcE17_C_get_mask_tableEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) &rArr; __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp (via Veneer)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
</UL>

<P><STRONG><a name="[1e3]"></a>std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, char.o(i._ZNSt12ctype_bynameIcEC1EPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned) &rArr; std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) &rArr; __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[325]"></a>std::ctype_byname&lang;char&rang;::ctype_byname__sub_object(const char*, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, char.o(i._ZNSt12ctype_bynameIcEC1EPKcj), UNUSED)

<P><STRONG><a name="[57]"></a>std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, char.o(i._ZNSt12ctype_bynameIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating() &rArr; std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[1b7]"></a>std::__rw_exception::_C_vformat(int, std::__va_list)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, rwstdexcept.o(i._ZNSt14__rw_exception10_C_vformatEiSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>

<P><STRONG><a name="[1b6]"></a>std::__rw_exception::__rw_exception()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__rw_exception::__rw_exception()
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>

<P><STRONG><a name="[326]"></a>std::__rw_exception::__rw_exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionC1Ev), UNUSED)

<P><STRONG><a name="[60]"></a>std::__rw_exception::~__rw_exception()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
</UL>
<P><STRONG><a name="[327]"></a>std::__rw_exception::~__rw_exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionD1Ev), UNUSED)

<P><STRONG><a name="[50]"></a>std::__rw_open_cat_data::__rw_open_cat_data()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
</UL>
<P><STRONG><a name="[328]"></a>std::__rw_open_cat_data::__rw_open_cat_data__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataC1Ev), UNUSED)

<P><STRONG><a name="[4f]"></a>std::__rw_open_cat_data::~__rw_open_cat_data()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = std::__rw_open_cat_data::~__rw_open_cat_data() &rArr; std::locale::~locale() &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
<LI> messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev)
</UL>
<P><STRONG><a name="[329]"></a>std::__rw_open_cat_data::~__rw_open_cat_data__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataD1Ev), UNUSED)

<P><STRONG><a name="[1e9]"></a>std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&) &rArr; std::locale::operator =(const std::locale&) &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
</UL>

<P><STRONG><a name="[58]"></a>std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, char.o(i._ZNSt5ctypeIcE12_C_initfacetERKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = std::ctype&lang;char&rang;::_C_initfacet(const std::locale&) &rArr; std::locale::name() const &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::name() const
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
<LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[1e4]"></a>std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, char.o(i._ZNSt5ctypeIcEC1EPKNSt10ctype_base4maskEbj))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[32a]"></a>std::ctype&lang;char&rang;::ctype__sub_object(const std::ctype_base::mask*, bool, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, char.o(i._ZNSt5ctypeIcEC1EPKNSt10ctype_base4maskEbj), UNUSED)

<P><STRONG><a name="[67]"></a>std::ctype&lang;char&rang;::~ctype__deallocating()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, char.o(i._ZNSt5ctypeIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = std::ctype&lang;char&rang;::~ctype__deallocating() &rArr; std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
</UL>
<P><STRONG><a name="[66]"></a>std::ctype&lang;char&rang;::~ctype()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, char.o(i._ZNSt5ctypeIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype__deallocating()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
</UL>
<P><STRONG><a name="[32b]"></a>std::ctype&lang;char&rang;::~ctype__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZNSt5ctypeIcED1Ev), UNUSED)

<P><STRONG><a name="[1ea]"></a>std::ctype&lang;wchar_t&rang;::ctype(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ios.o(i._ZNSt5ctypeIwEC1Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::ctype&lang;wchar_t&rang;::ctype(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::facet::facet(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_create_named_facet&lang;std::ctype&lang;wchar_t&rang;&rang;(T1*, const char*, unsigned)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;wchar_t&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[32c]"></a>std::ctype&lang;wchar_t&rang;::ctype__sub_object(unsigned)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ios.o(i._ZNSt5ctypeIwEC1Ej), UNUSED)

<P><STRONG><a name="[68]"></a>std::ctype&lang;wchar_t&rang;::~ctype__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ios.o(i._ZNSt5ctypeIwED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::ctype&lang;wchar_t&rang;::~ctype__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt5ctypeIwE)
</UL>
<P><STRONG><a name="[1eb]"></a>std::locale::facet::facet(unsigned, int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ios.o(i._ZNSt6locale5facetC1Eji))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::codecvt(unsigned)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;char, char, std::__mbstate_t&rang;::codecvt(unsigned)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;wchar_t&rang;::ctype(unsigned)
</UL>

<P><STRONG><a name="[32d]"></a>std::locale::facet::facet__sub_object(unsigned, int)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ios.o(i._ZNSt6locale5facetC1Eji), UNUSED)

<P><STRONG><a name="[55]"></a>std::locale::facet::~facet__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ios.o(i._ZNSt6locale5facetD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::locale::facet::~facet__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVNSt6locale5facetE)
</UL>
<P><STRONG><a name="[1ec]"></a>std::locale::_C_init()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, locale.o(i._ZNSt6locale7_C_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale()
</UL>

<P><STRONG><a name="[1d0]"></a>std::locale::classic()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, locale.o(i._ZNSt6locale7classicEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::__rw_open_cat_data()
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_locale(int) const
</UL>

<P><STRONG><a name="[1d5]"></a>std::locale::locale(__rw::__rw_locale_imp*)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeC1EPN4__rw15__rw_locale_impE))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
</UL>

<P><STRONG><a name="[32e]"></a>std::locale::locale__sub_object(__rw::__rw_locale_imp*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeC1EPN4__rw15__rw_locale_impE), UNUSED)

<P><STRONG><a name="[1e8]"></a>std::locale::locale(const std::locale&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ios.o(i._ZNSt6localeC1ERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::__rw_open_cat_data()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ios&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::init(std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ios&lang;char, std::char_traits&lang;char&rang;&rang;::init(std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;*)
</UL>

<P><STRONG><a name="[32f]"></a>std::locale::locale__sub_object(const std::locale&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ios.o(i._ZNSt6localeC1ERKS_), UNUSED)

<P><STRONG><a name="[1c0]"></a>std::locale::locale()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ios.o(i._ZNSt6localeC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = std::locale::locale() &rArr;  std::locale::_C_init() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_filebuf(int, wchar_t*, long)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::basic_filebuf(int, char*, long)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::ios_base()
</UL>

<P><STRONG><a name="[330]"></a>std::locale::locale__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ios.o(i._ZNSt6localeC1Ev), UNUSED)

<P><STRONG><a name="[48]"></a>std::locale::~locale()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = std::locale::~locale() &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::~__rw_open_cat_data()
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ios&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::init(std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ios&lang;char, std::char_traits&lang;char&rang;&rang;::init(std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> locale.o(i._ZNSt6locale7classicEv)
</UL>
<P><STRONG><a name="[331]"></a>std::locale::~locale__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeD1Ev), UNUSED)

<P><STRONG><a name="[1ce]"></a>std::locale::operator =(const std::locale&)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, locale.o(i._ZNSt6localeaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = std::locale::operator =(const std::locale&) &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[1ef]"></a>std::codecvt&lang;char, char, std::__mbstate_t&rang;::codecvt(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ios.o(i._ZNSt7codecvtIccSt11__mbstate_tEC1Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::codecvt&lang;char, char, std::__mbstate_t&rang;::codecvt(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::facet::facet(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_create_named_facet&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;(T1*, const char*, unsigned)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[332]"></a>std::codecvt&lang;char, char, std::__mbstate_t&rang;::codecvt__sub_object(unsigned)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ios.o(i._ZNSt7codecvtIccSt11__mbstate_tEC1Ej), UNUSED)

<P><STRONG><a name="[6a]"></a>std::codecvt&lang;char, char, std::__mbstate_t&rang;::~codecvt__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ios.o(i._ZNSt7codecvtIccSt11__mbstate_tED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::codecvt&lang;char, char, std::__mbstate_t&rang;::~codecvt__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt7codecvtIccSt11__mbstate_tE)
</UL>
<P><STRONG><a name="[1f0]"></a>std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::codecvt(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ios.o(i._ZNSt7codecvtIwcSt11__mbstate_tEC1Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::codecvt(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::facet::facet(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_create_named_facet&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;(T1*, const char*, unsigned)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[333]"></a>std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::codecvt__sub_object(unsigned)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ios.o(i._ZNSt7codecvtIwcSt11__mbstate_tEC1Ej), UNUSED)

<P><STRONG><a name="[6e]"></a>std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::~codecvt__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ios.o(i._ZNSt7codecvtIwcSt11__mbstate_tED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::~codecvt__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt7codecvtIwcSt11__mbstate_tE)
</UL>
<P><STRONG><a name="[11e]"></a>std::ios_base::Init::Init()</STRONG> (Thumb, 768 bytes, Stack size 32 bytes, ios.o(i._ZNSt8ios_base4InitC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = std::ios_base::Init::Init() &rArr; std::basic_ostream&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_ostream(std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;*) &rArr; std::basic_ios&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::init(std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;*) &rArr; std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ios&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_ios()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ios&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::init(std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ios&lang;char, std::char_traits&lang;char&rang;&rang;::basic_ios()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ios&lang;char, std::char_traits&lang;char&rang;&rang;::init(std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;*)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ostream&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_ostream(std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;*)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_filebuf(int, wchar_t*, long)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::basic_filebuf(int, char*, long)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ostream&lang;char, std::char_traits&lang;char&rang;&rang;::basic_ostream(std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_SerialPort_cpp
</UL>

<P><STRONG><a name="[334]"></a>std::ios_base::Init::Init__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ios.o(i._ZNSt8ios_base4InitC1Ev), UNUSED)

<P><STRONG><a name="[2a]"></a>std::ios_base::Init::~Init()</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ios.o(i._ZNSt8ios_base4InitD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::ios_base::Init::~Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialport.o(.text)
</UL>
<P><STRONG><a name="[335]"></a>std::ios_base::Init::~Init__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ios.o(i._ZNSt8ios_base4InitD1Ev), UNUSED)

<P><STRONG><a name="[1f9]"></a>std::ios_base::ios_base()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ios.o(i._ZNSt8ios_baseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::ios_base::ios_base() &rArr; std::locale::locale() &rArr;  std::locale::_C_init() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ios&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_ios()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ios&lang;char, std::char_traits&lang;char&rang;&rang;::basic_ios()
</UL>

<P><STRONG><a name="[336]"></a>std::ios_base::ios_base__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ios.o(i._ZNSt8ios_baseC1Ev), UNUSED)

<P><STRONG><a name="[73]"></a>std::messages&lang;char&rang;::~messages__deallocating()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt8messagesIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = std::messages&lang;char&rang;::~messages__deallocating() &rArr; std::messages&lang;char&rang;::~messages() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[72]"></a>std::messages&lang;char&rang;::~messages()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt8messagesIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = std::messages&lang;char&rang;::~messages() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[337]"></a>std::messages&lang;char&rang;::~messages__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt8messagesIcED1Ev), UNUSED)

<P><STRONG><a name="[1e7]"></a>std::exception::exception()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exception_ctor.o(i._ZNSt9exceptionC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception()
</UL>

<P><STRONG><a name="[338]"></a>std::exception::exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, exception_ctor.o(i._ZNSt9exceptionC1Ev), UNUSED)

<P><STRONG><a name="[1cc]"></a>std::__rw_get_cats()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, messages.o(i._ZSt13__rw_get_catsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = std::__rw_get_cats() &rArr; __aeabi_atexit &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_message(int, int, int) const
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_locale(int) const
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[4b]"></a>operator delete[] (void*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception_noex(int, char*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::~__rw_exception()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::setbuf(wchar_t*, long)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::setbuf(char*, long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_vec_new.o(i.__cxa_vec_new)
</UL>
<P><STRONG><a name="[12b]"></a>operator delete (void*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dOff()
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype__deallocating()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages__deallocating()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::~codecvt__deallocating()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;char, char, std::__mbstate_t&rang;::~codecvt__deallocating()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::facet::~facet__deallocating()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;wchar_t&rang;::~ctype__deallocating()
</UL>

<P><STRONG><a name="[1bd]"></a>operator new[] (unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_rwcats_cpp
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::setbuf(wchar_t*, long)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::setbuf(char*, long)
</UL>

<P><STRONG><a name="[12d]"></a>operator new(unsigned)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r0
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::buzz(float)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::Buzzer(float, int)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_create_named_facet&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;(T1*, const char*, unsigned)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_create_named_facet&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;(T1*, const char*, unsigned)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_create_named_facet&lang;std::ctype&lang;wchar_t&rang;&rang;(T1*, const char*, unsigned)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;::_C_maker_func(int, const char*, unsigned)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;::_C_maker_func(int, const char*, unsigned)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;wchar_t&rang;&rang;::_C_maker_func(int, const char*, unsigned)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[1fa]"></a>__ARM_array_new_general</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, array_new_general.o(i.__ARM_array_new_general))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>

<P><STRONG><a name="[14d]"></a>__ARM_common_call_via_r0</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_aeabi.o(i.__ARM_common_call_via_r0))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[139]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ios.o(i.__ARM_common_call_via_r1))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::setbuf(wchar_t*, long)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::setbuf(char*, long)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::encoding() const
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::always_noconv() const
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;char, char, std::__mbstate_t&rang;::encoding() const
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;char, char, std::__mbstate_t&rang;::always_noconv() const
</UL>

<P><STRONG><a name="[13b]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ios.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ios&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::init(std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ios&lang;char, std::char_traits&lang;char&rang;&rang;::init(std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;*)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::sync()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::sync()
</UL>

<P><STRONG><a name="[19b]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ios.o(i.__ARM_common_call_via_r3))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::Init::~Init()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
</UL>

<P><STRONG><a name="[1da]"></a>__ARM_common_call_via_r5</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ios.o(i.__ARM_common_call_via_r5))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::out(std::__mbstate_t&, const wchar_t*, const wchar_t*, const wchar_t*&, char*, char*, char*&) const
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;char, char, std::__mbstate_t&rang;::out(std::__mbstate_t&, const char*, const char*, const char*&, char*, char*, char*&) const
</UL>

<P><STRONG><a name="[1a2]"></a>__ARM_common_call_via_r6</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ios.o(i.__ARM_common_call_via_r6))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>

<P><STRONG><a name="[1a6]"></a>__ARM_common_call_via_r7</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ios.o(i.__ARM_common_call_via_r7))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[24a]"></a>__ARM_common_switch8</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ios.o(i.__ARM_common_switch8))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nt_name (via Veneer)
</UL>

<P><STRONG><a name="[165]"></a>__ARM_fpclassify</STRONG> (ARM, 48 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[3e]"></a>__SWI_0</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __SWI_0 &rArr; os_stk_check
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_post_taskswitch (Weak Reference)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stk_check
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_switch_tasks_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[3f]"></a>__SWI_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_membox.o(i.__SWI_1))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[40]"></a>__SWI_2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rt_membox.o(i.__SWI_2))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[41]"></a>__SWI_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_3))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[42]"></a>__SWI_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_4))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[44]"></a>__SWI_6</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_6))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[45]"></a>__SWI_7</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_7))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[11f]"></a>__aeabi_atexit</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, aeabi_atexit.o(i.__aeabi_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_SerialPort_cpp
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_rwcats_cpp
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_vec_dtor_cookie</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aeabi_vec_dtor_cookie.o(i.__aeabi_vec_dtor_cookie))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>

<P><STRONG><a name="[1c4]"></a>__aeabi_vec_new_cookie</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, aeabi_vec_new_cookie.o(i.__aeabi_vec_new_cookie))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[b4]"></a>__cxa_finalize</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, cxa_finalize.o(i.__cxa_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __cxa_finalize &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_1
</UL>

<P><STRONG><a name="[1ee]"></a>__cxa_guard_acquire</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[1ff]"></a>__cxa_vec_new</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, cxa_vec_new.o(i.__cxa_vec_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
</UL>

<P><STRONG><a name="[da]"></a>__fclose</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, _fs_fclose.o(i.__fclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __fclose &rArr; fat_close_write &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[e2]"></a>__flushbuf</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, _fs_flushbuf.o(i.__flushbuf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_ensure
</UL>

<P><STRONG><a name="[d8]"></a>__fopen</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, _fs_fopen.o(i.__fopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeID
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_file
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_params
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_drive
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[e4]"></a>__getfsize</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, _fs_getfsize.o(i.__getfsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __getfsize &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[20f]"></a>__kernel_poly</STRONG> (ARM, 256 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[210]"></a>__mathlib_dbl_underflow</STRONG> (ARM, 20 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[de]"></a>__read</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, _fs_read.o(i.__read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_fileMem
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadBlock
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[e0]"></a>__setfpos</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, _fs_setfpos.o(i.__setfpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __setfpos &rArr; fat_set_fpos &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_set_fpos
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[dc]"></a>__write</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, _fs_write.o(i.__write))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_BlockFull
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[20b]"></a>_fcreate</STRONG> (Thumb, 288 bytes, Stack size 72 bytes, _fs_fcreate.o(i._fcreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _fcreate &rArr; fs_mark_freeMem &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_freeMem
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeMem
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_check_fwopen
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[208]"></a>_fdelete</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, _fs_fdelete.o(i._fdelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _fdelete &rArr; fs_BlockInvalid &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_BlockInvalid
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_InitBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[25e]"></a>_init_box</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[200]"></a>fat_close_write</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, fs_fat.o(i.fat_close_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fat_close_write &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
</UL>

<P><STRONG><a name="[209]"></a>fat_create</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fs_fat.o(i.fat_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = fat_create &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[207]"></a>fat_delete</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fs_fat.o(i.fat_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = fat_delete &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[204]"></a>fat_find_file</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fs_fat.o(i.fat_find_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[212]"></a>fat_read</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, fs_fat.o(i.fat_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read
</UL>

<P><STRONG><a name="[215]"></a>fat_set_fpos</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, fs_fat.o(i.fat_set_fpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = fat_set_fpos &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
</UL>

<P><STRONG><a name="[217]"></a>fat_write</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, fs_fat.o(i.fat_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
</UL>

<P><STRONG><a name="[23f]"></a>fn_cmp</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fs_lib.o(i.fn_cmp))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
</UL>

<P><STRONG><a name="[3a]"></a>_fputc$unlocked</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[216]"></a>fs_AllocBlock</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, _fs_flashio.o(i.fs_AllocBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fs_AllocBlock &rArr; fs_mark_freeMem &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_freeMem
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeMem
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_check_fwopen
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
</UL>

<P><STRONG><a name="[218]"></a>fs_BlockFull</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, _fs_flashio.o(i.fs_BlockFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fs_BlockFull &rArr; fs_WriteBlock &rArr; fs_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
</UL>

<P><STRONG><a name="[21c]"></a>fs_BlockInvalid</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, _fs_flashio.o(i.fs_BlockInvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fs_BlockInvalid &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[240]"></a>fs_EraseSector</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_flashprg.o(i.fs_EraseSector))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_InitBlock
</UL>

<P><STRONG><a name="[206]"></a>fs_Find_File</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, _fs_flashio.o(i.fs_Find_File))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fs_Find_File &rArr; fs_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_ReadData
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadData
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_cmp
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[21d]"></a>fs_InitBlock</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, _fs_flashio.o(i.fs_InitBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_InitBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_EraseSector
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[243]"></a>fs_ProgramPage</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_flashprg.o(i.fs_ProgramPage))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>

<P><STRONG><a name="[214]"></a>fs_ReadBlock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, _fs_flashio.o(i.fs_ReadBlock), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_ReadData
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read
</UL>

<P><STRONG><a name="[23e]"></a>fs_ReadData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_lib.o(i.fs_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadBlock
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
</UL>

<P><STRONG><a name="[201]"></a>fs_WriteBlock</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, _fs_flashio.o(i.fs_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_WriteBlock &rArr; fs_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_ProgramPage
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ProgramPage
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flushbuf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_BlockFull
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[242]"></a>fs_WriteData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fs_lib.o(i.fs_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>

<P><STRONG><a name="[20c]"></a>fs_adr_sig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, _fs_flashio.o(i.fs_adr_sig))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_BlockInvalid
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_freeMem
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeMem
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_fileMem
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeID
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[219]"></a>fs_check_fwopen</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, _fs_flashio.o(i.fs_check_fwopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fs_check_fwopen
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
</UL>

<P><STRONG><a name="[202]"></a>fs_find_iob</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fs_lib.o(i.fs_find_iob))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fs_find_iob &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[246]"></a>fs_get_date</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_date))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
</UL>

<P><STRONG><a name="[203]"></a>fs_get_drive</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, fs_lib.o(i.fs_get_drive))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[20a]"></a>fs_get_freeID</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, _fs_flashio.o(i.fs_get_freeID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fs_get_freeID &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[21a]"></a>fs_get_freeMem</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, _fs_flashio.o(i.fs_get_freeMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fs_get_freeMem &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
</UL>

<P><STRONG><a name="[24c]"></a>fs_get_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>

<P><STRONG><a name="[213]"></a>fs_mark_fileMem</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, _fs_flashio.o(i.fs_mark_fileMem), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read
</UL>

<P><STRONG><a name="[21b]"></a>fs_mark_freeMem</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, _fs_flashio.o(i.fs_mark_freeMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fs_mark_freeMem &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
</UL>

<P><STRONG><a name="[20e]"></a>fs_rd_alloc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, _fs_flashio.o(i.fs_rd_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_BlockInvalid
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_freeMem
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeMem
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_fileMem
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeID
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[20d]"></a>fs_rd_sig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, _fs_flashio.o(i.fs_rd_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_rd_sig
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_fileMem
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[205]"></a>fs_set_params</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, fs_lib.o(i.fs_set_params))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[241]"></a>fs_spi_EraseSector</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_flashprg.o(i.fs_spi_EraseSector))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_InitBlock
</UL>

<P><STRONG><a name="[244]"></a>fs_spi_ProgramPage</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_flashprg.o(i.fs_spi_ProgramPage))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>

<P><STRONG><a name="[23d]"></a>fs_spi_ReadData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_flashprg.o(i.fs_spi_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadBlock
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
</UL>

<P><STRONG><a name="[24d]"></a>os_block</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_task.o(i.os_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_dly
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
</UL>

<P><STRONG><a name="[250]"></a>os_chk_robin</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_robin.o(i.os_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_chk_robin &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[252]"></a>os_dec_dly</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rt_list.o(i.os_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_dec_dly &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[253]"></a>os_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.os_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_rdy_first
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0
</UL>

<P><STRONG><a name="[255]"></a>os_evt_psh</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rt_event.o(i.os_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_evt_psh &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[24f]"></a>os_get_first</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rt_list.o(i.os_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_psh
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_chk_robin
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>

<P><STRONG><a name="[261]"></a>os_init_robin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_robin.o(i.os_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[258]"></a>os_init_stack</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, hal_arm.o(i.os_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_context
</UL>

<P><STRONG><a name="[259]"></a>os_mbx_psh</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rt_mailbox.o(i.os_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_mbx_psh &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[d1]"></a>os_mut_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_mutex.o(i.os_mut_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_mut_init
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[d5]"></a>os_mut_release</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, rt_mutex.o(i.os_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[d3]"></a>os_mut_wait</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, rt_mutex.o(i.os_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = os_mut_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resort_prio
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[24e]"></a>os_put_dly</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, rt_list.o(i.os_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>

<P><STRONG><a name="[251]"></a>os_put_prio</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rt_list.o(i.os_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_psh
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_psh
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dec_dly
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_chk_robin
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resort_prio
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
</UL>

<P><STRONG><a name="[254]"></a>os_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.os_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
</UL>

<P><STRONG><a name="[25a]"></a>os_resort_prio</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_list.o(i.os_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_resort_prio &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_list
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
</UL>

<P><STRONG><a name="[256]"></a>os_rmv_dly</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, rt_list.o(i.os_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_psh
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_psh
</UL>

<P><STRONG><a name="[25b]"></a>os_rmv_list</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, rt_list.o(i.os_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resort_prio
</UL>

<P><STRONG><a name="[25c]"></a>os_sem_psh</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_semaphore.o(i.os_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_sem_psh &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[1fc]"></a>os_stk_check</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_arm.o(i.os_stk_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_stk_check
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SWI_0
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[22]"></a>os_sys_init1</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, rt_task.o(i.os_sys_init1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_sys_init1 &rArr; os_init_context &rArr; os_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init (Weak Reference)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_run
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_env
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_robin
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[24]"></a>os_sys_manager</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, rt_system.o(i.os_sys_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = os_sys_manager &rArr; os_mbx_psh &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_inspect_ovf
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_inspect_cnt
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_reload (Weak Reference)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_tick
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_psh
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_psh
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dec_dly
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_chk_robin
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_post_taskswitch (Weak Reference)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stk_check
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager_ret
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dec_qc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_rdy_first
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[267]"></a>os_tmr_tick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_timer.o(i.os_tmr_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_tmr_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_call
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[4e]"></a>os_tsk_create0</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, rt_task.o(i.os_tsk_create0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_tsk_create0 &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_notify (Weak Reference)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.os_sys_init1)
</UL>
<P><STRONG><a name="[cf]"></a>os_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.os_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[100]"></a>pow</STRONG> (ARM, 3832 bytes, Stack size 112 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(int, int, unsigned char, unsigned char) (via Veneer)
</UL>

<P><STRONG><a name="[26c]"></a>sqrt</STRONG> (ARM, 108 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[35]"></a>_get_lc_ctype</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2 (via Veneer)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>_get_lc_numeric</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2 (via Veneer)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname (via Veneer)
</UL>

<P><STRONG><a name="[283]"></a>__rw::__string_ref&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_inc_ref()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ios.o(t._ZN4__rw12__string_refIcSt11char_traitsIcESaIcEE10_C_inc_refEv))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
</UL>

<P><STRONG><a name="[51]"></a>__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ios.o(t._ZN4__rw16__rw_facet_makerISt5ctypeIcEE13_C_maker_funcEiPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned) &rArr; std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned) &rArr; std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) &rArr; __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs)
<LI> ios.o(t._ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E)
</UL>
<P><STRONG><a name="[52]"></a>__rw::__rw_facet_maker&lang;std::ctype&lang;wchar_t&rang;&rang;::_C_maker_func(int, const char*, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ios.o(t._ZN4__rw16__rw_facet_makerISt5ctypeIwEE13_C_maker_funcEiPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __rw::__rw_facet_maker&lang;std::ctype&lang;wchar_t&rang;&rang;::_C_maker_func(int, const char*, unsigned) &rArr; __rw::__rw_create_named_facet&lang;std::ctype&lang;wchar_t&rang;&rang;(T1*, const char*, unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_create_named_facet&lang;std::ctype&lang;wchar_t&rang;&rang;(T1*, const char*, unsigned)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;wchar_t&rang;::ctype(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ios.o(t._ZNSt9basic_iosIwSt11char_traitsIwEE4initEPSt15basic_streambufIwS1_E)
</UL>
<P><STRONG><a name="[53]"></a>__rw::__rw_facet_maker&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;::_C_maker_func(int, const char*, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ios.o(t._ZN4__rw16__rw_facet_makerISt7codecvtIccSt11__mbstate_tEE13_C_maker_funcEiPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __rw::__rw_facet_maker&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;::_C_maker_func(int, const char*, unsigned) &rArr; __rw::__rw_create_named_facet&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;(T1*, const char*, unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_create_named_facet&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;(T1*, const char*, unsigned)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;char, char, std::__mbstate_t&rang;::codecvt(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ios.o(t._ZSt9use_facetISt7codecvtIccSt11__mbstate_tEERKT_RKSt6locale)
</UL>
<P><STRONG><a name="[54]"></a>__rw::__rw_facet_maker&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;::_C_maker_func(int, const char*, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ios.o(t._ZN4__rw16__rw_facet_makerISt7codecvtIwcSt11__mbstate_tEE13_C_maker_funcEiPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __rw::__rw_facet_maker&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;::_C_maker_func(int, const char*, unsigned) &rArr; __rw::__rw_create_named_facet&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;(T1*, const char*, unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_create_named_facet&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;(T1*, const char*, unsigned)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::codecvt(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ios.o(t._ZSt9use_facetISt7codecvtIwcSt11__mbstate_tEERKT_RKSt6locale)
</UL>
<P><STRONG><a name="[282]"></a>__rw::__rw_new_capacity&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;(unsigned, const std::basic_string&lang;T1, T2, T3&rang;*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, serialport.o(t._ZN4__rw17__rw_new_capacityIcSt11char_traitsIcESaIcEEEjjPKSbIT_T0_T1_E), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, unsigned, char)
</UL>

<P><STRONG><a name="[1d4]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorIPNS_15__rw_facet_baseEE6resizeEjRKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
</UL>

<P><STRONG><a name="[1c7]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorIPNS_15__rw_facet_baseEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>

<P><STRONG><a name="[339]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorIPNS_15__rw_facet_baseEED1Ev), UNUSED)

<P><STRONG><a name="[4c]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwcats.o(i.__sti___10_rwcats_cpp)
</UL>
<P><STRONG><a name="[33a]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev), UNUSED)

<P><STRONG><a name="[1c1]"></a>__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ios.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[33b]"></a>__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ios.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev), UNUSED)

<P><STRONG><a name="[1cd]"></a>__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned) &rArr; std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::__rw_open_cat_data()
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[49]"></a>__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(i._ZSt13__rw_get_catsv)
</UL>
<P><STRONG><a name="[33c]"></a>__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev), UNUSED)

<P><STRONG><a name="[275]"></a>__rw::__rw_create_named_facet&lang;std::ctype&lang;wchar_t&rang;&rang;(T1*, const char*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ios.o(t._ZN4__rw23__rw_create_named_facetISt5ctypeIwEEEPT_S4_PKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __rw::__rw_create_named_facet&lang;std::ctype&lang;wchar_t&rang;&rang;(T1*, const char*, unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;wchar_t&rang;::ctype(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;wchar_t&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[276]"></a>__rw::__rw_create_named_facet&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;(T1*, const char*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ios.o(t._ZN4__rw23__rw_create_named_facetISt7codecvtIccSt11__mbstate_tEEEPT_S5_PKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __rw::__rw_create_named_facet&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;(T1*, const char*, unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;char, char, std::__mbstate_t&rang;::codecvt(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[277]"></a>__rw::__rw_create_named_facet&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;(T1*, const char*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ios.o(t._ZN4__rw23__rw_create_named_facetISt7codecvtIwcSt11__mbstate_tEEEPT_S5_PKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __rw::__rw_create_named_facet&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;(T1*, const char*, unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::codecvt(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[278]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::compare(unsigned, unsigned, const char*, unsigned) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, portpin.o(t._ZNKSs7compareEjjPKcj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::operator ==&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;(const std::basic_string&lang;T1, T2, T3&rang;&, const T1*)
</UL>

<P><STRONG><a name="[27a]"></a>std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::is_open() const</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ios.o(t._ZNKSt13basic_filebufIcSt11char_traitsIcEE7is_openEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::is_open() const
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_file_t::_C_is_open() const
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::overflow(int)
</UL>

<P><STRONG><a name="[27c]"></a>std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::is_open() const</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ios.o(t._ZNKSt13basic_filebufIwSt11char_traitsIwEE7is_openEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::is_open() const
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_file_t::_C_is_open() const
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::overflow(int)
</UL>

<P><STRONG><a name="[286]"></a>std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;::_C_is_eof(int) const</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, ios.o(t._ZNKSt15basic_streambufIcSt11char_traitsIcEE9_C_is_eofEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;::_C_is_eof(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::overflow(int)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::sync()
</UL>

<P><STRONG><a name="[291]"></a>std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::_C_is_eof(int) const</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, ios.o(t._ZNKSt15basic_streambufIwSt11char_traitsIwEE9_C_is_eofEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::_C_is_eof(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::overflow(int)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::sync()
</UL>

<P><STRONG><a name="[289]"></a>std::fpos&lang;std::__mbstate_t&rang;::operator ==(const std::fpos&lang;std::__mbstate_t&rang;&) const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ios.o(t._ZNKSt4fposISt11__mbstate_tEeqERKS1_))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::sync()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::sync()
</UL>

<P><STRONG><a name="[27d]"></a>std::fpos&lang;std::__mbstate_t&rang;::operator +(long) const</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ios.o(t._ZNKSt4fposISt11__mbstate_tEplEl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::fpos&lang;std::__mbstate_t&rang;::operator +(long) const
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fpos&lang;std::__mbstate_t&rang;::fpos(const std::fpos&lang;std::__mbstate_t&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::sync()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::sync()
</UL>

<P><STRONG><a name="[75]"></a>std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_message(int, int, int) const
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_locale(int) const
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[74]"></a>std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwstdexcept.o(t._ZNKSt8messagesIcE7do_openERKSsRKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned) &rArr; std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[1f4]"></a>std::basic_ostream&lang;char, std::char_traits&lang;char&rang;&rang;::basic_ostream(std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ios.o(t._ZNSoC1EPSt15basic_streambufIcSt11char_traitsIcEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = std::basic_ostream&lang;char, std::char_traits&lang;char&rang;&rang;::basic_ostream(std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;*) &rArr; std::basic_ios&lang;char, std::char_traits&lang;char&rang;&rang;::init(std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;*) &rArr; std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ios&lang;char, std::char_traits&lang;char&rang;&rang;::basic_ios()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ios&lang;char, std::char_traits&lang;char&rang;&rang;::init(std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::Init::Init()
</UL>

<P><STRONG><a name="[27f]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, locale.o(t._ZNSs11_C_allocateEjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
</UL>

<P><STRONG><a name="[114]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::erase(unsigned, unsigned)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, serialport.o(t._ZNSs5eraseEjj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::readLine(char, bool)
</UL>

<P><STRONG><a name="[280]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, locale.o(t._ZNSs7replaceEjjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::erase(unsigned, unsigned)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
</UL>

<P><STRONG><a name="[281]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, ios.o(t._ZNSs7replaceEjjPKcjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::move(char*, const char*, unsigned)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
</UL>

<P><STRONG><a name="[113]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, unsigned, char)</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, serialport.o(t._ZNSs7replaceEjjjc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove (via Veneer)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_new_capacity&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;(unsigned, const std::basic_string&lang;T1, T2, T3&rang;*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::readLine(char, bool)
</UL>

<P><STRONG><a name="[fe]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_clone(unsigned)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lcd.o(t._ZNSs8_C_cloneEj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, unsigned char, unsigned char)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator [](unsigned)
</UL>

<P><STRONG><a name="[119]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ios.o(t._ZNSs9_C_getRepEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + In Cycle
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_clone(unsigned)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, unsigned, char)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(char*, bool)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[10e]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ios.o(t._ZNSs9_C_unlinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::PortPin(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::PortPin(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, unsigned, char)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(char*, bool)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[10d]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, locale.o(t._ZNSsC1EPKcRKSaIcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::PortPin(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::name() const
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[33d]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const char*, const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, locale.o(t._ZNSsC1EPKcRKSaIcE), UNUSED)

<P><STRONG><a name="[1b1]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, locale.o(t._ZNSsC1ERKSaIcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func5&rang;
</UL>

<P><STRONG><a name="[33e]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(t._ZNSsC1ERKSaIcE), UNUSED)

<P><STRONG><a name="[107]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ios.o(t._ZNSsC1ERKSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__string_ref&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_inc_ref()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::PortPin(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::PortPin(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::StringToUpper(std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[33f]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ios.o(t._ZNSsC1ERKSs), UNUSED)

<P><STRONG><a name="[46]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ios.o(t._ZNSsD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
<LI> ios.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev)
</UL>
<P><STRONG><a name="[340]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ios.o(t._ZNSsD1Ev), UNUSED)

<P><STRONG><a name="[1ed]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, locale.o(t._ZNSsaSEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>

<P><STRONG><a name="[1c5]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, locale.o(t._ZNSsaSERKSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__string_ref&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_inc_ref()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[105]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator [](unsigned)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sdcard.o(t._ZNSsixEj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_clone(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::StringToUpper(std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, bool)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(char*, bool)
</UL>

<P><STRONG><a name="[284]"></a>std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::_C_file_seek(long, int)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ios.o(t._ZNSt13basic_filebufIcSt11char_traitsIcEE12_C_file_seekEli))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::_C_file_seek(long, int) &rArr; __rw::__rw_file_t::_C_seek(long, int) &rArr; fseek &rArr; _fseek &rArr; _sys_flen &rArr; __getfsize &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fpos&lang;std::__mbstate_t&rang;::fpos(long)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_file_t::_C_seek(long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::overflow(int)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::sync()
</UL>

<P><STRONG><a name="[5c]"></a>std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::sync()</STRONG> (Thumb, 302 bytes, Stack size 616 bytes, ios.o(t._ZNSt13basic_filebufIcSt11char_traitsIcEE4syncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::sync() &rArr; std::use_facet&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;(const std::locale&) &rArr; std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::use_facet&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;(const std::locale&)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fpos&lang;std::__mbstate_t&rang;::operator =(const std::fpos&lang;std::__mbstate_t&rang;&)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::_C_file_seek(long, int)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fpos&lang;std::__mbstate_t&rang;::operator +(long) const
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fpos&lang;std::__mbstate_t&rang;::operator ==(const std::fpos&lang;std::__mbstate_t&rang;&) const
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;::_C_is_eof(int) const
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::move(char*, const char*, unsigned)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;char, char, std::__mbstate_t&rang;::encoding() const
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;char, char, std::__mbstate_t&rang;::out(std::__mbstate_t&, const char*, const char*, const char*&, char*, char*, char*&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt13basic_filebufIcSt11char_traitsIcEE)
</UL>
<P><STRONG><a name="[5a]"></a>std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::setbuf(char*, long)</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ios.o(t._ZNSt13basic_filebufIcSt11char_traitsIcEE6setbufEPcl))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::setbuf(char*, long) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;::_C_set_unbuffered(bool)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;::_C_own_buf(bool)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::basic_filebuf(int, char*, long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt13basic_filebufIcSt11char_traitsIcEE)
</UL>
<P><STRONG><a name="[5b]"></a>std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::overflow(int)</STRONG> (Thumb, 376 bytes, Stack size 592 bytes, ios.o(t._ZNSt13basic_filebufIcSt11char_traitsIcEE8overflowEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::overflow(int) &rArr; std::use_facet&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;(const std::locale&) &rArr; std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::use_facet&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;(const std::locale&)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fpos&lang;std::__mbstate_t&rang;::operator =(const std::fpos&lang;std::__mbstate_t&rang;&)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;::sputc(char)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;::_C_out_last(bool)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::_C_file_seek(long, int)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;::_C_is_eof(int) const
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::is_open() const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::not_eof(const int&)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;char, char, std::__mbstate_t&rang;::out(std::__mbstate_t&, const char*, const char*, const char*&, char*, char*, char*&) const
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;char, char, std::__mbstate_t&rang;::always_noconv() const
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_file_t::_C_write(const void*, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt13basic_filebufIcSt11char_traitsIcEE)
</UL>
<P><STRONG><a name="[1f1]"></a>std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::basic_filebuf(int, char*, long)</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ios.o(t._ZNSt13basic_filebufIcSt11char_traitsIcEEC1EiPcl))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::basic_filebuf(int, char*, long) &rArr; __rw::__rw_file_t::__rw_file_t(int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fpos&lang;std::__mbstate_t&rang;::fpos(long)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::setbuf(char*, long)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_file_t::__rw_file_t(int)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_file_t::_C_get_mode(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::Init::Init()
</UL>

<P><STRONG><a name="[341]"></a>std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::basic_filebuf__sub_object(int, char*, long)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, ios.o(t._ZNSt13basic_filebufIcSt11char_traitsIcEEC1EiPcl), UNUSED)

<P><STRONG><a name="[290]"></a>std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::_C_file_seek(long, int)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ios.o(t._ZNSt13basic_filebufIwSt11char_traitsIwEE12_C_file_seekEli))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::_C_file_seek(long, int) &rArr; __rw::__rw_file_t::_C_seek(long, int) &rArr; fseek &rArr; _fseek &rArr; _sys_flen &rArr; __getfsize &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fpos&lang;std::__mbstate_t&rang;::fpos(long)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_file_t::_C_seek(long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::overflow(int)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::sync()
</UL>

<P><STRONG><a name="[5f]"></a>std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::sync()</STRONG> (Thumb, 310 bytes, Stack size 616 bytes, ios.o(t._ZNSt13basic_filebufIwSt11char_traitsIwEE4syncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::sync() &rArr; std::use_facet&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;(const std::locale&) &rArr; std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::use_facet&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;(const std::locale&)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fpos&lang;std::__mbstate_t&rang;::operator =(const std::fpos&lang;std::__mbstate_t&rang;&)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::_C_file_seek(long, int)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fpos&lang;std::__mbstate_t&rang;::operator +(long) const
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fpos&lang;std::__mbstate_t&rang;::operator ==(const std::fpos&lang;std::__mbstate_t&rang;&) const
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::_C_is_eof(int) const
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;wchar_t&rang;::move(wchar_t*, const wchar_t*, unsigned)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::encoding() const
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::out(std::__mbstate_t&, const wchar_t*, const wchar_t*, const wchar_t*&, char*, char*, char*&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt13basic_filebufIwSt11char_traitsIwEE)
</UL>
<P><STRONG><a name="[5d]"></a>std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::setbuf(wchar_t*, long)</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ios.o(t._ZNSt13basic_filebufIwSt11char_traitsIwEE6setbufEPwl))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::setbuf(wchar_t*, long) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::_C_set_unbuffered(bool)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::_C_own_buf(bool)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_filebuf(int, wchar_t*, long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt13basic_filebufIwSt11char_traitsIwEE)
</UL>
<P><STRONG><a name="[5e]"></a>std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::overflow(int)</STRONG> (Thumb, 380 bytes, Stack size 592 bytes, ios.o(t._ZNSt13basic_filebufIwSt11char_traitsIwEE8overflowEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::overflow(int) &rArr; std::use_facet&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;(const std::locale&) &rArr; std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::use_facet&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;(const std::locale&)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fpos&lang;std::__mbstate_t&rang;::operator =(const std::fpos&lang;std::__mbstate_t&rang;&)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::sputc(wchar_t)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::_C_out_last(bool)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::_C_file_seek(long, int)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::_C_is_eof(int) const
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::is_open() const
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;wchar_t&rang;::not_eof(const int&)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::out(std::__mbstate_t&, const wchar_t*, const wchar_t*, const wchar_t*&, char*, char*, char*&) const
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;::always_noconv() const
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_file_t::_C_write(const void*, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt13basic_filebufIwSt11char_traitsIwEE)
</UL>
<P><STRONG><a name="[1f5]"></a>std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_filebuf(int, wchar_t*, long)</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ios.o(t._ZNSt13basic_filebufIwSt11char_traitsIwEEC1EiPwl))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_filebuf(int, wchar_t*, long) &rArr; __rw::__rw_file_t::__rw_file_t(int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fpos&lang;std::__mbstate_t&rang;::fpos(long)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::setbuf(wchar_t*, long)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_file_t::__rw_file_t(int)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_file_t::_C_get_mode(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::Init::Init()
</UL>

<P><STRONG><a name="[342]"></a>std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_filebuf__sub_object(int, wchar_t*, long)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, ios.o(t._ZNSt13basic_filebufIwSt11char_traitsIwEEC1EiPwl), UNUSED)

<P><STRONG><a name="[1f8]"></a>std::basic_ostream&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_ostream(std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ios.o(t._ZNSt13basic_ostreamIwSt11char_traitsIwEEC1EPSt15basic_streambufIwS1_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = std::basic_ostream&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_ostream(std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;*) &rArr; std::basic_ios&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::init(std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;*) &rArr; std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ios&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_ios()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ios&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::init(std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::Init::Init()
</UL>

<P><STRONG><a name="[28a]"></a>std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;::_C_own_buf(bool)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ios.o(t._ZNSt15basic_streambufIcSt11char_traitsIcEE10_C_own_bufEb))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::setbuf(char*, long)
</UL>

<P><STRONG><a name="[28d]"></a>std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;::_C_out_last(bool)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ios.o(t._ZNSt15basic_streambufIcSt11char_traitsIcEE11_C_out_lastEb))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::overflow(int)
</UL>

<P><STRONG><a name="[28b]"></a>std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;::_C_set_unbuffered(bool)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ios.o(t._ZNSt15basic_streambufIcSt11char_traitsIcEE17_C_set_unbufferedEb))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::setbuf(char*, long)
</UL>

<P><STRONG><a name="[28c]"></a>std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;::sputc(char)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ios.o(t._ZNSt15basic_streambufIcSt11char_traitsIcEE5sputcEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;::sputc(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::overflow(int)
</UL>

<P><STRONG><a name="[62]"></a>std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;::setbuf(char*, long)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ios.o(t._ZNSt15basic_streambufIcSt11char_traitsIcEE6setbufEPcl))
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt15basic_streambufIcSt11char_traitsIcEE)
</UL>
<P><STRONG><a name="[63]"></a>std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;::overflow(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ios.o(t._ZNSt15basic_streambufIcSt11char_traitsIcEE8overflowEi))
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt15basic_streambufIcSt11char_traitsIcEE)
</UL>
<P><STRONG><a name="[293]"></a>std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::_C_own_buf(bool)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ios.o(t._ZNSt15basic_streambufIwSt11char_traitsIwEE10_C_own_bufEb))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::setbuf(wchar_t*, long)
</UL>

<P><STRONG><a name="[296]"></a>std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::_C_out_last(bool)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ios.o(t._ZNSt15basic_streambufIwSt11char_traitsIwEE11_C_out_lastEb))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::overflow(int)
</UL>

<P><STRONG><a name="[294]"></a>std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::_C_set_unbuffered(bool)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ios.o(t._ZNSt15basic_streambufIwSt11char_traitsIwEE17_C_set_unbufferedEb))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::setbuf(wchar_t*, long)
</UL>

<P><STRONG><a name="[295]"></a>std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::sputc(wchar_t)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ios.o(t._ZNSt15basic_streambufIwSt11char_traitsIwEE5sputcEw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::sputc(wchar_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::overflow(int)
</UL>

<P><STRONG><a name="[64]"></a>std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::setbuf(wchar_t*, long)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ios.o(t._ZNSt15basic_streambufIwSt11char_traitsIwEE6setbufEPwl))
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt15basic_streambufIwSt11char_traitsIwEE)
</UL>
<P><STRONG><a name="[65]"></a>std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::overflow(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ios.o(t._ZNSt15basic_streambufIwSt11char_traitsIwEE8overflowEi))
<BR>[Address Reference Count : 1]<UL><LI> ios.o(.constdata__ZTVSt15basic_streambufIwSt11char_traitsIwEE)
</UL>
<P><STRONG><a name="[27e]"></a>std::fpos&lang;std::__mbstate_t&rang;::fpos(const std::fpos&lang;std::__mbstate_t&rang;&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ios.o(t._ZNSt4fposISt11__mbstate_tEC1ERKS1_))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fpos&lang;std::__mbstate_t&rang;::operator +(long) const
</UL>

<P><STRONG><a name="[343]"></a>std::fpos&lang;std::__mbstate_t&rang;::fpos__sub_object(const std::fpos&lang;std::__mbstate_t&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ios.o(t._ZNSt4fposISt11__mbstate_tEC1ERKS1_), UNUSED)

<P><STRONG><a name="[285]"></a>std::fpos&lang;std::__mbstate_t&rang;::fpos(long)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ios.o(t._ZNSt4fposISt11__mbstate_tEC1El))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_filebuf(int, wchar_t*, long)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::_C_file_seek(long, int)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::basic_filebuf(int, char*, long)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::_C_file_seek(long, int)
</UL>

<P><STRONG><a name="[344]"></a>std::fpos&lang;std::__mbstate_t&rang;::fpos__sub_object(long)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ios.o(t._ZNSt4fposISt11__mbstate_tEC1El), UNUSED)

<P><STRONG><a name="[288]"></a>std::fpos&lang;std::__mbstate_t&rang;::operator =(const std::fpos&lang;std::__mbstate_t&rang;&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ios.o(t._ZNSt4fposISt11__mbstate_tEaSERKS1_))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::overflow(int)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::sync()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::overflow(int)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::sync()
</UL>

<P><STRONG><a name="[1f3]"></a>std::basic_ios&lang;char, std::char_traits&lang;char&rang;&rang;::init(std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;*)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ios.o(t._ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = std::basic_ios&lang;char, std::char_traits&lang;char&rang;&rang;::init(std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;*) &rArr; std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::Init::Init()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ostream&lang;char, std::char_traits&lang;char&rang;&rang;::basic_ostream(std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;*)
</UL>

<P><STRONG><a name="[1f2]"></a>std::basic_ios&lang;char, std::char_traits&lang;char&rang;&rang;::basic_ios()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ios.o(t._ZNSt9basic_iosIcSt11char_traitsIcEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::basic_ios&lang;char, std::char_traits&lang;char&rang;&rang;::basic_ios() &rArr; std::ios_base::ios_base() &rArr; std::locale::locale() &rArr;  std::locale::_C_init() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::ios_base()
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::Init::Init()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ostream&lang;char, std::char_traits&lang;char&rang;&rang;::basic_ostream(std::basic_streambuf&lang;char, std::char_traits&lang;char&rang;&rang;*)
</UL>

<P><STRONG><a name="[345]"></a>std::basic_ios&lang;char, std::char_traits&lang;char&rang;&rang;::basic_ios__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ios.o(t._ZNSt9basic_iosIcSt11char_traitsIcEEC1Ev), UNUSED)

<P><STRONG><a name="[1f7]"></a>std::basic_ios&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::init(std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;*)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ios.o(t._ZNSt9basic_iosIwSt11char_traitsIwEE4initEPSt15basic_streambufIwS1_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = std::basic_ios&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::init(std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;*) &rArr; std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::Init::Init()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ostream&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_ostream(std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;*)
</UL>

<P><STRONG><a name="[1f6]"></a>std::basic_ios&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_ios()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ios.o(t._ZNSt9basic_iosIwSt11char_traitsIwEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::basic_ios&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_ios() &rArr; std::ios_base::ios_base() &rArr; std::locale::locale() &rArr;  std::locale::_C_init() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::ios_base()
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::Init::Init()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_ostream&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_ostream(std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;*)
</UL>

<P><STRONG><a name="[346]"></a>std::basic_ios&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_ios__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ios.o(t._ZNSt9basic_iosIwSt11char_traitsIwEEC1Ev), UNUSED)

<P><STRONG><a name="[287]"></a>std::use_facet&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;(const std::locale&)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ios.o(t._ZSt9use_facetISt7codecvtIccSt11__mbstate_tEERKT_RKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = std::use_facet&lang;std::codecvt&lang;char, char, std::__mbstate_t&rang;&rang;(const std::locale&) &rArr; std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::overflow(int)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;char, std::char_traits&lang;char&rang;&rang;::sync()
</UL>

<P><STRONG><a name="[292]"></a>std::use_facet&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;(const std::locale&)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ios.o(t._ZSt9use_facetISt7codecvtIwcSt11__mbstate_tEERKT_RKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = std::use_facet&lang;std::codecvt&lang;wchar_t, char, std::__mbstate_t&rang;&rang;(const std::locale&) &rArr; std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::overflow(int)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_filebuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::sync()
</UL>

<P><STRONG><a name="[109]"></a>std::operator ==&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;(const std::basic_string&lang;T1, T2, T3&rang;&, const T1*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, portpin.o(t._ZSteqIcSt11char_traitsIcESaIcEEbRKSbIT_T0_T1_EPKS3_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::compare(unsigned, unsigned, const char*, unsigned) const
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin::setPinConfiguration(unsigned char, int, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;, std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;)
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_d2f</STRONG> (ARM, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do1() (via Veneer)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerT3isr()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatchT2isr()
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerT1isr()
</UL>

<P><STRONG><a name="[298]"></a>_d2f</STRONG> (ARM, 108 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_dadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do1() (via Veneer)
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatchT2isr()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[29b]"></a>_dadd</STRONG> (ARM, 336 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[29e]"></a>__fpl_dcheck_NaN1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
</UL>

<P><STRONG><a name="[2a3]"></a>__fpl_dcmp_Inf</STRONG> (ARM, 28 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[26b]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2a0]"></a>_ddiv</STRONG> (ARM, 600 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_d2iz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(int, int, unsigned char, unsigned char) (via Veneer)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHigh() (via Veneer)
</UL>

<P><STRONG><a name="[2a1]"></a>_dfix</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(int, int, unsigned char, unsigned char) (via Veneer)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHigh() (via Veneer)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[347]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[348]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[349]"></a>__aeabi_cdcmple</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[2a2]"></a>_dcmple</STRONG> (ARM, 148 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[2a6]"></a>__fpl_dcmple_InfNaN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_dmul</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHigh() (via Veneer)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2a4]"></a>_dmul</STRONG> (ARM, 372 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[29a]"></a>__fpl_dnaninf</STRONG> (ARM, 192 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[29d]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[26e]"></a>__aeabi_cdrcmple</STRONG> (ARM, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2a5]"></a>_drcmple</STRONG> (ARM, 140 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[26d]"></a>__aeabi_drsub</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2a7]"></a>_drsb</STRONG> (ARM, 24 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[272]"></a>_dsqrt</STRONG> (ARM, 516 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_dsub</STRONG> (ARM, 0 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(int, int, unsigned char, unsigned char) (via Veneer)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerT3isr()
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerT1isr()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2a9]"></a>_dsub</STRONG> (ARM, 576 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_f2d</STRONG> (ARM, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::write(float, int, unsigned char, unsigned char) (via Veneer)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do1() (via Veneer)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerT3isr()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatchT2isr()
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerT1isr()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(float, int, bool) (via Veneer)
</UL>

<P><STRONG><a name="[2aa]"></a>_f2d</STRONG> (ARM, 100 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_fdiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::Buzzer(float, int) (via Veneer)
</UL>

<P><STRONG><a name="[2ac]"></a>_fdiv</STRONG> (ARM, 396 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2ab]"></a>__fpl_fnaninf</STRONG> (ARM, 168 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[a8]"></a>_fp_init</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _fp_init &rArr; __rt_fp_status_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[34a]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[299]"></a>__fpl_fretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[15]"></a>__ieee_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[8a]"></a>_printf_fp_dec</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[29f]"></a>__fpl_return_NaN</STRONG> (ARM, 116 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[26f]"></a>__ARM_scalbn</STRONG> (ARM, 0 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[211]"></a>scalbn</STRONG> (ARM, 108 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[34b]"></a>__fpl_inf_scalbn</STRONG> (ARM, 0 bytes, Stack size unknown bytes, scalbn.o(x$fpl$scalbn), UNUSED)

<P><STRONG><a name="[2ad]"></a>__fpl_cmpreturn</STRONG> (ARM, 60 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[34c]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1a]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>mci_command</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, mci_lpc23xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mci_command
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_config
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_sect
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_send_stop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_status
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_select_card
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_send_acmd
</UL>

<P><STRONG><a name="[c0]"></a>mci_send_acmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mci_lpc23xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_command
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_init
</UL>

<P><STRONG><a name="[c2]"></a>mci_select_card</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mci_lpc23xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_command
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_init
</UL>

<P><STRONG><a name="[c5]"></a>mci_bus_mode</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mci_lpc23xx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_init
</UL>

<P><STRONG><a name="[c6]"></a>mci_read_status</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mci_lpc23xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mci_read_status &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_command
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_wait_for_tran
</UL>

<P><STRONG><a name="[c9]"></a>mci_dma_start</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mci_lpc23xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_sect
</UL>

<P><STRONG><a name="[c4]"></a>mci_set_speed</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mci_lpc23xx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_init
</UL>

<P><STRONG><a name="[ca]"></a>mci_send_stop</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mci_lpc23xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_command
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_sect
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_wait_for_tran
</UL>

<P><STRONG><a name="[c8]"></a>mci_wait_for_tran</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mci_lpc23xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_send_stop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_config
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_sect
</UL>

<P><STRONG><a name="[76]"></a>__sti___8_main_cpp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___8_main_cpp &rArr; LCD::LCD() &rArr; LCD::lcd_write_data(unsigned char) &rArr; LCD::wait_while_busy() &rArr; LCD::lcd_read_status()
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::LCD()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ADC(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[77]"></a>__sti___14_SerialPort_cpp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, serialport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = __sti___14_SerialPort_cpp &rArr; std::ios_base::Init::Init() &rArr; std::basic_ostream&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::basic_ostream(std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;*) &rArr; std::basic_ios&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;::init(std::basic_streambuf&lang;wchar_t, std::char_traits&lang;wchar_t&rang;&rang;*) &rArr; std::locale::_C_use_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::Init::Init()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialport.o(.init_array)
</UL>
<P><STRONG><a name="[78]"></a>__sti___13_Interrupt_cpp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___13_Interrupt_cpp &rArr; LCD::LCD() &rArr; LCD::lcd_write_data(unsigned char) &rArr; LCD::wait_while_busy() &rArr; LCD::lcd_read_status()
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::LCD()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupt.o(.init_array)
</UL>
<P><STRONG><a name="[79]"></a>__sti___9_Timer_cpp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___9_Timer_cpp &rArr; LCD::LCD() &rArr; LCD::lcd_write_data(unsigned char) &rArr; LCD::wait_while_busy() &rArr; LCD::lcd_read_status()
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::LCD()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.init_array)
</UL>
<P><STRONG><a name="[7a]"></a>__sti___10_Buzzer_cpp</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___10_Buzzer_cpp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC::DAC()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buzzer.o(.init_array)
</UL>
<P><STRONG><a name="[257]"></a>os_init_context</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_task.o(i.os_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_init_context &rArr; os_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[26]"></a>Switch_task</STRONG> (ARM, 0 bytes, Stack size unknown bytes, hal_arm.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[21e]"></a>alloc_name</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, fs_fat.o(i.alloc_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = alloc_name &rArr; alloc_new_clus &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[223]"></a>alloc_new_clus</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fs_fat.o(i.alloc_new_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = alloc_new_clus &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[22a]"></a>cache_fat</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fs_fat.o(i.cache_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>

<P><STRONG><a name="[21f]"></a>check_lfn</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fs_fat.o(i.check_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char_sn
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[22c]"></a>check_name</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fs_fat.o(i.check_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
</UL>

<P><STRONG><a name="[22e]"></a>chk_dir_empty</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, fs_fat.o(i.chk_dir_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = chk_dir_empty &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[224]"></a>clear_clus</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fs_fat.o(i.clear_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clear_clus &rArr; write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[225]"></a>clus_to_sect</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, fs_fat.o(i.clus_to_sect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[231]"></a>cvt_fatname</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, fs_fat.o(i.cvt_fatname))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cvt_fatname &rArr; val_char
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>

<P><STRONG><a name="[233]"></a>delete_entries</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, fs_fat.o(i.delete_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = delete_entries &rArr; unlink_clus_chain &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[238]"></a>fat_find_dir</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, fs_fat.o(i.fat_find_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_file
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[23a]"></a>find_name</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fs_fat.o(i.find_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = find_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_file
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[228]"></a>get_EOC</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fs_fat.o(i.get_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>

<P><STRONG><a name="[245]"></a>get_date</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fs_fat.o(i.get_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_date
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_date
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
</UL>

<P><STRONG><a name="[220]"></a>get_dir_sect</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fs_fat.o(i.get_dir_sect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_dir_sect &rArr; clus_to_sect
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>

<P><STRONG><a name="[247]"></a>get_fat_sect</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat.o(i.get_fat_sect))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
</UL>

<P><STRONG><a name="[227]"></a>get_free_clus</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, fs_fat.o(i.get_free_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_free_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>

<P><STRONG><a name="[249]"></a>get_nt_name</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, fs_fat.o(i.get_nt_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_nt_name &rArr; val_char
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
</UL>

<P><STRONG><a name="[24b]"></a>get_time</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fs_fat.o(i.get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
</UL>

<P><STRONG><a name="[271]"></a>get_u16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fs_fat.o(i.get_u16))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>

<P><STRONG><a name="[248]"></a>get_u32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_fat.o(i.get_u32))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
</UL>

<P><STRONG><a name="[222]"></a>is_EOC</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fs_fat.o(i.is_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[270]"></a>lfn_calc_chksum</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fs_fat.o(i.lfn_calc_chksum))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>

<P><STRONG><a name="[23c]"></a>read_cache</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fs_fat.o(i.read_cache), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_sect
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[236]"></a>read_last_entry</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fs_fat.o(i.read_last_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_last_entry &rArr; read_sector &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>

<P><STRONG><a name="[226]"></a>read_sector</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fs_fat.o(i.read_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_sector &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_sect
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>

<P><STRONG><a name="[22d]"></a>search_for_name</STRONG> (Thumb, 548 bytes, Stack size 96 bytes, fs_fat.o(i.search_for_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_calc_chksum
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt_fatname
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_name
</UL>

<P><STRONG><a name="[221]"></a>set_next_clus</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, fs_fat.o(i.set_next_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_set_fpos
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[273]"></a>set_u16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_fat.o(i.set_u16))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
</UL>

<P><STRONG><a name="[274]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_fat.o(i.set_u32))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
</UL>

<P><STRONG><a name="[235]"></a>unlink_clus_chain</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, fs_fat.o(i.unlink_clus_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = unlink_clus_chain &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
</UL>

<P><STRONG><a name="[232]"></a>val_char</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fs_fat.o(i.val_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = val_char
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char_sn
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nt_name
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt_fatname
</UL>

<P><STRONG><a name="[22b]"></a>val_char_sn</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fs_fat.o(i.val_char_sn))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
</UL>

<P><STRONG><a name="[230]"></a>write_cache</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, fs_fat.o(i.write_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>

<P><STRONG><a name="[23b]"></a>write_dot_entries</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, fs_fat.o(i.write_dot_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = write_dot_entries &rArr; write_sector &rArr; mmc_write_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>

<P><STRONG><a name="[239]"></a>write_entries</STRONG> (Thumb, 704 bytes, Stack size 96 bytes, fs_fat.o(i.write_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_calc_chksum
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nt_name
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt_fatname
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_name
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[229]"></a>write_fat_link</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fs_fat.o(i.write_fat_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = write_fat_link &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>

<P><STRONG><a name="[237]"></a>write_fsinfo</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fs_fat.o(i.write_fsinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = write_fsinfo &rArr; write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>

<P><STRONG><a name="[234]"></a>write_sector</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fs_fat.o(i.write_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_sector &rArr; mmc_write_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>

<P><STRONG><a name="[140]"></a>_freopen_locked</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = _freopen_locked &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_read_sect &rArr; mci_wait_for_tran &rArr; mci_send_stop &rArr; mci_command
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1aa]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1a9]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1a8]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1ab]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1bc]"></a>__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, rwstdexcept.o(i._ZN4__rw13__rw_vfmatstrEPcjPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[1be]"></a>__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)</STRONG> (Thumb, 332 bytes, Stack size 80 bytes, rwstdexcept.o(i._ZN4__rw13__rw_vfmatstrEPcjiSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r7
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
</UL>

<P><STRONG><a name="[2a8]"></a>_dadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[29c]"></a>_dsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[152]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[15e]"></a>_fp_digits</STRONG> (Thumb, 408 bytes, Stack size 88 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status (via Veneer)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via Veneer)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via Veneer)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e (via Veneer)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[37]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>__sti___8_char_cpp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, char.o(i.__sti___8_char_cpp))
<BR>[Address Reference Count : 1]<UL><LI> char.o(.init_array)
</UL>
<P><STRONG><a name="[47]"></a>&lang;Func5&rang;</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, locale.o(i.<Func5>))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = &lang;Func5&rang; &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
</UL>
<P><STRONG><a name="[7c]"></a>__sti___10_locale_cpp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, locale.o(i.__sti___10_locale_cpp))
<BR>[Address Reference Count : 1]<UL><LI> locale.o(.init_array)
</UL>
<P><STRONG><a name="[3b]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>__sti___10_rwcats_cpp</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rwcats.o(i.__sti___10_rwcats_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __sti___10_rwcats_cpp &rArr; __aeabi_atexit &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwcats.o(.init_array)
</UL>
<P><STRONG><a name="[3d]"></a>__default_terminate_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL>
<P><STRONG><a name="[198]"></a>_locale_name</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, locale_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _locale_name &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>

<P><STRONG><a name="[199]"></a>_set_locale_byname</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, locale_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _set_locale_byname &rArr; _locale_name &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time (Weak Reference)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (via Veneer)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (via Veneer)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[2ae]"></a>__fpl_infinity</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
</UL>

<P><STRONG><a name="[19c]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[19a]"></a>_get_lc_time</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>

<P><STRONG><a name="[18b]"></a>_mutex_free</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[180]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[197]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[265]"></a>os_tmr_reload</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[25d]"></a>rt_init</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[26a]"></a>rt_notify</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0
</UL>

<P><STRONG><a name="[1fd]"></a>rt_post_taskswitch</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SWI_0
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>
<HR></body></html>
