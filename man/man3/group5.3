.TH "Analoug to Digital Convertor (ADC)" 3 "Sun Jun 26 2011" "Version 1.100.000" "Object Oriented Library for ARM 7" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Analoug to Digital Convertor (ADC) \- 
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBADC\fP"
.br
.RI "\fIclass \fBADC\fP: is a class in charge of \fBADC\fP channels(0 to 7) of ARM 7 processor. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBADC::ADC\fP (uint8_t newChannelNumber)"
.br
.ti -1c
.RI "int \fBADC::getADCValue\fP (void)"
.br
.ti -1c
.RI "void \fBADC::stopADCConversion\fP (void)"
.br
.ti -1c
.RI "void \fBADC::startADCConversion\fP (void)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Analoug to Digital Convertor (\fBADC\fP) 
.SH "Function Documentation"
.PP 
.SS "ADC::ADC (uint8_tnewChannelNumber)"\fB\fBADC()\fP constructor.\fP 
.PP
\fBParameters:\fP
.RS 4
\fIuint8_t\fP newChannelNumber: \fBADC\fP channel number from 0 to 7 
.RE
.PP

.SS "int ADC::getADCValue (void)"read the value of respective \fBADC\fP.
.br
 
.PP
\fBReturns:\fP
.RS 4
int ADCValue: return the \fBADC\fP value of the respective \fBADC\fP channel.
.br
 
.br
.RE
.PP
\fBExample:\fP
.br
 \fBADC\fP myADC(0); 
.br
 int ADCValueOfChannel0=myADC.\fBgetADCValue()\fP; 
.br
 
.SS "void ADC::startADCConversion (void)"start \fBADC\fP conversion, once \fBADC\fP object created in the memory it start convertion automaticaly, this method use when conversion stoped by 'stopADCConversion' other wise there is no need of useing just to save power it is efficent to stop the conversion when it is not neccessery.
.br
 
.br
.PP
\fBExample:\fP
.br
.PP
\fBADC\fP myADC(0); 
.br
 myADC.startADCConversion();
.br
 int ADCValueOfChannel0=myADC.\fBgetADCValue()\fP; 
.br
 myADC.stopADCConversion(); 
.SS "void ADC::stopADCConversion (void)"stop \fBADC\fP conversion.
.br
 
.br
.PP
\fBExample:\fP
.br
.PP
\fBADC\fP myADC(0); 
.br
 int ADCValueOfChannel0=myADC.\fBgetADCValue()\fP; 
.br
 myADC.stopADCConversion(); 
.SH "Author"
.PP 
Generated automatically by Doxygen for Object Oriented Library for ARM 7 from the source code.
